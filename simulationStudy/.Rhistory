trueCurveHill14 <- readRDS(paste0('./Data/hill_fixed_14.rds'))[simNumber,times]
trueCurveHill30 <- readRDS(paste0('./Data/hill_fixed_30.rds'))[simNumber,times]
trueCurvePower14 <- readRDS(paste0('./Data/power_fixed_14.rds'))[simNumber,times]
trueCurvePower30 <- readRDS(paste0('./Data/power_fixed_30.rds'))[simNumber,times]
# using epidemic trajectory and true parameters, find value of alarm[t]/beta[t]
paramsTruth <- read.xlsx('simParamsSummary.xlsx')
paramsTruth <- paramsTruth[paramsTruth$infPeriod == 'fixed',]
N <- 1e6
trueAlarmThresh14 <- thresholdAlarm(movingAverage(trueCurveThresh14, 14),
N = N,
delta = paramsTruth$delta[
(paramsTruth$alarmGen == 'thresh' &
paramsTruth$smoothWindow == 14)],
H = paramsTruth$H[
(paramsTruth$alarmGen == 'thresh' &
paramsTruth$smoothWindow == 14)])
trueAlarmThresh30 <- thresholdAlarm(movingAverage(trueCurveThresh30, 30),
N = N,
delta = paramsTruth$delta[
(paramsTruth$alarmGen == 'thresh' &
paramsTruth$smoothWindow == 30)],
H = paramsTruth$H[
(paramsTruth$alarmGen == 'thresh' &
paramsTruth$smoothWindow == 30)])
trueAlarmHill14 <- hillAlarm(movingAverage(trueCurveHill14, 14),
nu = paramsTruth$nu[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 14)],
x0 = paramsTruth$x0[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 14)],
delta = paramsTruth$delta[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 14)])
trueAlarmHill30 <- hillAlarm(movingAverage(trueCurveHill30, 30),
nu = paramsTruth$nu[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 30)],
x0 = paramsTruth$x0[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 30)],
delta = paramsTruth$delta[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 30)])
trueAlarmPower14 <- powerAlarm(movingAverage(trueCurvePower14, 14),
N = N,
k = paramsTruth$k[
(paramsTruth$alarmGen == 'power' &
paramsTruth$smoothWindow == 14)])
trueAlarmPower30 <- powerAlarm(movingAverage(trueCurvePower30, 30),
N = N,
k = paramsTruth$k[
(paramsTruth$alarmGen == 'power' &
paramsTruth$smoothWindow == 30)])
trueAlarmsSim <- data.frame(time = rep(times, 6),
trueAlarm = c(trueAlarmThresh14,
trueAlarmThresh30,
trueAlarmHill14,
trueAlarmHill30,
trueAlarmPower14,
trueAlarmPower30),
alarmGen = c(rep('thresh', length(times)*2),
rep('hill', length(times)*2),
rep('power', length(times)*2)),
smoothWindow = rep(rep(c(14, 30), each = length(times)), 3))
# from true alarms, get true beta[t]
trueBeta <- trueAlarmsSim
trueBeta$trueBeta <- 0.36 * (1 - trueBeta$trueAlarm)
### load posterior estimates
betaPostAll <- readRDS('./resultsFinal/betaPostAll.rds')
betaPostAll[betaPostAll$simNumber == simNumber,]
ggplot() +
geom_line(data = subset(betaPostAll, smoothWindow == 14 & noConverge == 0),
aes(x = time, y = mean, group = simNumber),
col = adjustcolor('grey40', alpha = 0.5)) +
geom_line(data = subset(trueBeta, smoothWindow == 14),
aes(x = time, y = trueBeta), col = 'red') +
facet_grid(~alarmGen)
betaPostAll
ggplot() +
geom_line(data = subset(betaPostAll, smoothWindow == 14 ),
aes(x = time, y = mean, group = simNumber),
col = adjustcolor('grey40', alpha = 0.5)) +
geom_line(data = subset(trueBeta, smoothWindow == 14),
aes(x = time, y = trueBeta), col = 'red') +
geom_ribbon(data=subset(trueBeta, smoothWindow == 14),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_grid(~alarmGen)
# from true alarms, get true beta[t]
trueBeta <- trueAlarmsSim
trueBeta$trueBeta <- 0.36 * (1 - trueBeta$trueAlarm)
### load posterior estimates
betaPostAll <- readRDS('./resultsFinal/betaPostAll.rds')
betaPostAll[betaPostAll$simNumber == simNumber,]
ggplot() +
geom_line(data = subset(betaPostAll, smoothWindow == 14 ),
aes(x = time, y = mean, group = simNumber),
col = adjustcolor('grey40', alpha = 0.5)) +
geom_line(data = subset(trueBeta, smoothWindow == 14),
aes(x = time, y = trueBeta), col = 'red') +
geom_ribbon(data=subset(trueBeta, smoothWindow == 14),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_grid(~alarmGen)
ggplot() +
geom_line(data = subset(betaPostAll, smoothWindow == 14 ),
aes(x = time, y = mean, group = simNumber),
col = adjustcolor('grey40', alpha = 0.5)) +
geom_line(data = subset(trueBeta, smoothWindow == 14),
aes(x = time, y = trueBeta), col = 'red') +
geom_ribbon(data=subset(betaPostAll, smoothWindow == 14),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_grid(~alarmGen)
betaPostAll
### load posterior estimates
betaPostAll <- readRDS('./resultsFinal/betaPostAll.rds')
betaPostAll <- betaPostAll[betaPostAll$simNumber == simNumber,]
ggplot() +
geom_line(data = subset(betaPostAll, smoothWindow == 14 ),
aes(x = time, y = mean, group = simNumber),
col = adjustcolor('grey40', alpha = 0.5)) +
geom_line(data = subset(trueBeta, smoothWindow == 14),
aes(x = time, y = trueBeta), col = 'red') +
geom_ribbon(data=subset(betaPostAll, smoothWindow == 14),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_grid(~alarmGen)
ggplot() +
geom_line(data = subset(betaPostAll, smoothWindow == 14 ),
aes(x = time, y = mean, group = simNumber),
col = 'red') +
geom_ribbon(data=subset(betaPostAll, smoothWindow == 14),
aes(x = time, ymin = lower, ymax = upper),
alpha = 0.3, fill = 'red') +
geom_line(data = subset(trueBeta, smoothWindow == 14),
aes(x = time, y = trueBeta), col = 'black') +
facet_grid(~alarmGen)
ggplot() +
geom_line(data = subset(betaPostAll,),
aes(x = time, y = mean, group = simNumber),
col = 'red') +
geom_ribbon(data=subset(betaPostAll),
aes(x = time, ymin = lower, ymax = upper),
alpha = 0.3, fill = 'red') +
geom_line(data = subset(trueBeta),
aes(x = time, y = trueBeta), col = 'black') +
facet_grid(~alarmGen + smoothWindow, nrow = 2)
ggplot() +
geom_line(data = subset(betaPostAll,),
aes(x = time, y = mean, group = simNumber),
col = 'red') +
geom_ribbon(data=subset(betaPostAll),
aes(x = time, ymin = lower, ymax = upper),
alpha = 0.3, fill = 'red') +
geom_line(data = subset(trueBeta),
aes(x = time, y = trueBeta), col = 'black') +
facet_grid(~alarmGen + smoothWindow)
ggplot() +
geom_line(data = subset(betaPostAll,),
aes(x = time, y = mean, group = simNumber),
col = 'red') +
geom_ribbon(data=subset(betaPostAll),
aes(x = time, ymin = lower, ymax = upper),
alpha = 0.3, fill = 'red') +
geom_line(data = subset(trueBeta),
aes(x = time, y = trueBeta), col = 'black') +
facet_wrap(~alarmGen + smoothWindow, nrow = 2)
ggplot() +
geom_line(data = subset(betaPostAll,),
aes(x = time, y = mean, group = simNumber),
col = 'red') +
geom_ribbon(data=subset(betaPostAll),
aes(x = time, ymin = lower, ymax = upper),
alpha = 0.3, fill = 'red') +
geom_line(data = subset(trueBeta),
aes(x = time, y = trueBeta), col = 'black') +
facet_wrap(~smoothWindow + alarmGen, nrow = 2)
?facet_wrap
ggplot() +
geom_line(data = subset(betaPostAll,),
aes(x = time, y = mean, group = simNumber),
col = 'red') +
geom_ribbon(data=subset(betaPostAll),
aes(x = time, ymin = lower, ymax = upper),
alpha = 0.3, fill = 'red') +
geom_line(data = subset(trueBeta),
aes(x = time, y = trueBeta), col = 'black') +
facet_wrap(~smoothWindow + alarmGen, nrow = 2, labeller = "label_both")
# beta[t] depends on epidemic trajectory
simNumber <- 42
times <- 1:50
# get true epidemic curves for each scenario
trueCurveThresh14 <- readRDS(paste0('./Data/thresh_fixed_14.rds'))[simNumber,times]
trueCurveThresh30 <- readRDS(paste0('./Data/thresh_fixed_30.rds'))[simNumber,times]
trueCurveHill14 <- readRDS(paste0('./Data/hill_fixed_14.rds'))[simNumber,times]
trueCurveHill30 <- readRDS(paste0('./Data/hill_fixed_30.rds'))[simNumber,times]
trueCurvePower14 <- readRDS(paste0('./Data/power_fixed_14.rds'))[simNumber,times]
trueCurvePower30 <- readRDS(paste0('./Data/power_fixed_30.rds'))[simNumber,times]
# using epidemic trajectory and true parameters, find value of alarm[t]/beta[t]
paramsTruth <- read.xlsx('simParamsSummary.xlsx')
paramsTruth <- paramsTruth[paramsTruth$infPeriod == 'fixed',]
N <- 1e6
trueAlarmThresh14 <- thresholdAlarm(movingAverage(trueCurveThresh14, 14),
N = N,
delta = paramsTruth$delta[
(paramsTruth$alarmGen == 'thresh' &
paramsTruth$smoothWindow == 14)],
H = paramsTruth$H[
(paramsTruth$alarmGen == 'thresh' &
paramsTruth$smoothWindow == 14)])
trueAlarmThresh30 <- thresholdAlarm(movingAverage(trueCurveThresh30, 30),
N = N,
delta = paramsTruth$delta[
(paramsTruth$alarmGen == 'thresh' &
paramsTruth$smoothWindow == 30)],
H = paramsTruth$H[
(paramsTruth$alarmGen == 'thresh' &
paramsTruth$smoothWindow == 30)])
trueAlarmHill14 <- hillAlarm(movingAverage(trueCurveHill14, 14),
nu = paramsTruth$nu[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 14)],
x0 = paramsTruth$x0[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 14)],
delta = paramsTruth$delta[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 14)])
trueAlarmHill30 <- hillAlarm(movingAverage(trueCurveHill30, 30),
nu = paramsTruth$nu[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 30)],
x0 = paramsTruth$x0[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 30)],
delta = paramsTruth$delta[
(paramsTruth$alarmGen == 'hill' &
paramsTruth$smoothWindow == 30)])
trueAlarmPower14 <- powerAlarm(movingAverage(trueCurvePower14, 14),
N = N,
k = paramsTruth$k[
(paramsTruth$alarmGen == 'power' &
paramsTruth$smoothWindow == 14)])
trueAlarmPower30 <- powerAlarm(movingAverage(trueCurvePower30, 30),
N = N,
k = paramsTruth$k[
(paramsTruth$alarmGen == 'power' &
paramsTruth$smoothWindow == 30)])
trueAlarmsSim <- data.frame(time = rep(times, 6),
trueAlarm = c(trueAlarmThresh14,
trueAlarmThresh30,
trueAlarmHill14,
trueAlarmHill30,
trueAlarmPower14,
trueAlarmPower30),
alarmGen = c(rep('thresh', length(times)*2),
rep('hill', length(times)*2),
rep('power', length(times)*2)),
smoothWindow = rep(rep(c(14, 30), each = length(times)), 3))
# from true alarms, get true beta[t]
trueBeta <- trueAlarmsSim
trueBeta$trueBeta <- 0.36 * (1 - trueBeta$trueAlarm)
### load posterior estimates
betaPostAll <- readRDS('./resultsFinal/betaPostAll.rds')
betaPostAll <- betaPostAll[betaPostAll$simNumber == simNumber,]
ggplot() +
geom_line(data = subset(betaPostAll,),
aes(x = time, y = mean, group = simNumber),
col = 'red') +
geom_ribbon(data=subset(betaPostAll),
aes(x = time, ymin = lower, ymax = upper),
alpha = 0.3, fill = 'red') +
geom_line(data = subset(trueBeta),
aes(x = time, y = trueBeta), col = 'black') +
facet_wrap(~smoothWindow + alarmGen, nrow = 2, labeller = "label_both")
waicAll <- readRDS('./resultsFinal/waicAll.rds')
head(waicAll)
waicAll <- readRDS('./resultsFinal/waicAll.rds')
### remove those that did not converge (TEMPORARY)
waicAll <- merge(waicAll, notConvergeModels,
by = c('alarmGen', 'alarmFit',
'infPeriod', 'smoothWindow', 'simNumber'),
all.x = T)
waicAll$noConverge[is.na(waicAll$noConverge)] <- 0
head(waicAll)
library(plyr)
# summaries of WAIC values by model
ddply(waicAll, .(alarmGen, alarmFit, smoothWindow), summarize,
mean_WAIC = mean(waic[noConverge == 0]),
mean_lppd = mean(lppd[noConverge == 0]),
mean_pWAIC = mean(pWAIC[noConverge == 0]))
# summaries of WAIC values by model
ddply(waicAll, .(alarmGen, alarmFit, smoothWindow), summarize,
mean_WAIC = mean(waic),
mean_lppd = mean(lppd[noConverge == 0]),
mean_pWAIC = mean(pWAIC[noConverge == 0]))
waicSummaries <- waicSummaries[order(waicSummaries$mean_WAIC),]
# summaries of WAIC values by model
waicSummaries <- ddply(waicAll, .(alarmGen, alarmFit, smoothWindow), summarize,
mean_WAIC = mean(waic[noConverge == 0]),
mean_lppd = mean(lppd[noConverge == 0]),
mean_pWAIC = mean(pWAIC[noConverge == 0]))
waicSummaries <- waicSummaries[order(waicSummaries$mean_WAIC),]
threshWAIC14 <- subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 14)
subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 14)
subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 14)
subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 30)
subset(waicSummaries, alarmGen == 'hill' & smoothWindow == 14)
subset(waicSummaries, alarmGen == 'hill' & smoothWindow == 30)
subset(waicSummaries, alarmGen == 'power' & smoothWindow == 14)
subset(waicSummaries, alarmGen == 'power' & smoothWindow == 30)
head(waicAll)
waicMin <- ddply(waicAll, .(alarmGen, alarmFit, smoothWindow), summarize,
minWAIC = min(waic[noConverge == 0]))
head(waicMin)
waicMin <- ddply(waicAll, .(alarmGen, alarmFit, smoothWindow, simNumber), summarize,
minWAIC = min(waic[noConverge == 0]))
warnigns()
warnings()
waicMin <- ddply(waicAll, .(alarmGen, alarmFit, smoothWindow, simNumber), summarize,
minWAIC = min(waic))
waicMin
waicMin <- ddply(waicAll, .(alarmGen, smoothWindow, simNumber), summarize,
minWAIC = min(waic[noConverge == 0]))
head(waicMin)
head(waicAll)
waicAll <- merge(waicAll, waicMin, by = c('alarmGen', 'smoothWindow', 'simNumber'),
all.x = T)
head(waicAll)
?which.min
ddply(waicAll, .(alarmGen, smoothWindow, simNumber), summarize,
selected = alarmFit[which(waic == minWAIC)])
table(waicSeleted$smoothWindow, waicSeleted$alarmGen, waicSeleted$selected)
waicSelected <- ddply(waicAll, .(alarmGen, smoothWindow, simNumber), summarize,
selected = alarmFit[which(waic == minWAIC)])
table(waicSelected$smoothWindow, waicSelected$alarmGen, waicSelected$selected)
table(waicSelected$selected, waicSelected$alarmGen, waicSelected$smoothWindow)
with(waicSelected, table(selected, alarmGen, smoothWindow))
?selected
factor(waicSelected$selected)
?table
with(waicSelected, table(selected, alarmGen, smoothWindow, exclude = NULL))
waicSelected$selected <- factor(waicSelected$selected,
levels = c('thresh', 'hill', 'power', 'gp', 'spline', 'betat', 'basic'))
with(waicSelected, table(selected, alarmGen, smoothWindow, exclude = NULL))
waicTab <- with(waicSelected, table(selected, alarmGen, smoothWindow, exclude = NULL))
prop.table(waicTab, 2)
prop.table(waicTab, 3)
prop.table(waicTab, 1)
?prop.table
prop.table(waicTab, c(1, 2))
prop.table(waicTab, 'alarmGen')
waicTab14 <- with(subset(waicSelected, smoothWindow == 14),
table(selected, alarmGen, exclude = NULL))
prop.table(waicTab14, 2)
library(knitr)
kable(prop.table(waicTab14, 2))
?kable
kable(paste0(prop.table(waicTab14, 2) * 100, '%'))
apply(waicTab14, c(1,2), percent, accuracy =0.1)
library(scales)
apply(waicTab14, c(1,2), percent, accuracy =0.1)
waicTab14
kable(prop.table(waicTab14, 2))
apply(waicTab14, 2, percent, accuracy =0.2)
waicTab14 <- with(subset(waicSelected, smoothWindow == 14),
table(selected, alarmGen, exclude = NULL))
waicTab14 <- prop.table(waicTab14, 2)
apply(waicTab14, 2, percent, accuracy =0.2)
waicTab14 <- with(subset(waicSelected, smoothWindow == 14),
table(selected, alarmGen, exclude = NULL))
waicTab14 <- prop.table(waicTab14, 2)
kable(apply(waicTab14, 2, percent, accuracy =0.2))
waicSelected$alarmGen <- factor(waicSelected$alarmGen,
levels = c('thresh', 'hill', 'power'))
waicTab14 <- with(subset(waicSelected, smoothWindow == 14),
table(selected, alarmGen, exclude = NULL))
waicTab14 <- prop.table(waicTab14, 2)
kable(apply(waicTab14, 2, percent, accuracy =0.2))
waicTab30 <- with(subset(waicSelected, smoothWindow == 30),
table(selected, alarmGen, exclude = NULL))
waicTab30 <- prop.table(waicTab30, 2)
kable(apply(waicTab30, 2, percent, accuracy =0.2))
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/simulationStudy")
knitr::opts_chunk$set(echo = FALSE, fig.width = 14, fig.height = 10)
library(openxlsx)
library(ggplot2)
library(grid)
library(gridExtra)
library(nimble)
library(plyr)
library(knitr)
library(scales)
# functions to calculate the alarms
source('./scripts/modelCodes.R')
theme_set(theme_bw() +
theme(strip.background = element_rect(fill = 'white'),
strip.text = element_text(size = 16),
axis.title = element_text(size = 16),
axis.text = element_text(size = 14)))
grAll <- readRDS('./resultsFinal/grAll.rds')
# which didn't converge
notConverge <- grAll[which(grAll$gr > 1.1),  ]
notConvergeModels <-  notConverge[!duplicated(notConverge[,-which(colnames(notConverge) %in%
c('gr', 'grUpper', 'param'))]),
c('alarmGen', 'alarmFit',
'infPeriod', 'smoothWindow', 'simNumber')]
notConvergeModels$noConverge <- 1
table(notConvergeModels$alarmGen,
notConvergeModels$alarmFit,
notConvergeModels$smoothWindow)
### load truth
paramsTruth <- read.xlsx('simParamsSummary.xlsx')
paramsTruth <- paramsTruth[paramsTruth$infPeriod == 'fixed',]
### wide to long
paramsTruth <- reshape(paramsTruth,
varying = c("beta", "delta", "H", "nu", "x0", "k"),
v.names = "truth",
timevar = "param",
times = c("beta", "delta", "H", "nu", "x0", "k"),
new.row.names = 1:1000,
direction = "long")
paramsTruth <- paramsTruth[-which(is.na(paramsTruth$truth)),]
paramsTruth <- paramsTruth[order(paramsTruth$alarmGen, paramsTruth$smoothWindow, paramsTruth$param),]
paramsTruth <- paramsTruth[-which(colnames(paramsTruth) %in% c('infPeriod', 'id'))]
paramsPostAll <- readRDS('./resultsFinal/paramsPostAll.rds')
# only keep rows where alarmGen == alarmFit
paramsPostAll <- paramsPostAll[paramsPostAll$alarmGen == paramsPostAll$alarmFit,]
# merge with truth
paramsPostAll <- merge(paramsPostAll, paramsTruth, by = c('param', 'alarmGen', 'smoothWindow'),
all.x = T)
paramsPostAll <- paramsPostAll[order(paramsPostAll$alarmGen,
paramsPostAll$smoothWindow,
paramsPostAll$simNumber,
paramsPostAll$param),]
### remove those that did not converge (TEMPORARY)
paramsPostAll <- merge(paramsPostAll, notConvergeModels,
by = c('alarmGen', 'alarmFit',
'infPeriod', 'smoothWindow', 'simNumber'),
all.x = T)
paramsPostAll$noConverge[is.na(paramsPostAll$noConverge)] <- 0
### threshold alarm
ggplot(data = subset(paramsPostAll, alarmFit == 'thresh' & noConverge == 0),
aes(x = simNumber, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
position = position_dodge(width = 0.9)) +
geom_hline(aes(yintercept = truth), col = 'red', linetype = 2) +
facet_wrap(~param + smoothWindow, nrow = 2, scales = 'free_y',
labeller = "label_both") +
labs(x = 'Simulation Number', y = '')
### threshold alarm
ggplot(data = subset(paramsPostAll, alarmFit == 'thresh' & noConverge == 0),
aes(x = simNumber, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
position = position_dodge(width = 0.9)) +
geom_hline(aes(yintercept = truth), col = 'red', linetype = 2) +
facet_wrap(~smoothWindow + param, nrow = 2, scales = 'free_y',
labeller = "label_both") +
labs(x = 'Simulation Number', y = '')
### hill alarm
ggplot(data = subset(paramsPostAll, alarmFit == 'hill' & noConverge == 0),
aes(x = simNumber, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
position = position_dodge(width = 0.9)) +
geom_hline(aes(yintercept = truth), col = 'red', linetype = 2) +
facet_wrap(~param + smoothWindow, nrow = 2, scales = 'free_y',
labeller = "label_both") +
labs(x = 'Simulation Number', y = '')
### hill alarm
ggplot(data = subset(paramsPostAll, alarmFit == 'hill' & noConverge == 0),
aes(x = simNumber, y = mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
position = position_dodge(width = 0.9)) +
geom_hline(aes(yintercept = truth), col = 'red', linetype = 2) +
facet_wrap(~smoothWindow + param, nrow = 2, scales = 'free_y',
labeller = "label_both") +
labs(x = 'Simulation Number', y = '')
waicAll <- readRDS('./resultsFinal/waicAll.rds')
### remove those that did not converge (TEMPORARY)
waicAll <- merge(waicAll, notConvergeModels,
by = c('alarmGen', 'alarmFit',
'infPeriod', 'smoothWindow', 'simNumber'),
all.x = T)
waicAll$noConverge[is.na(waicAll$noConverge)] <- 0
# summaries of WAIC values by model
waicSummaries <- ddply(waicAll, .(alarmGen, alarmFit, smoothWindow), summarize,
mean_WAIC = mean(waic[noConverge == 0]),
mean_lppd = mean(lppd[noConverge == 0]),
mean_pWAIC = mean(pWAIC[noConverge == 0]))
waicSummaries <- waicSummaries[order(waicSummaries$mean_WAIC),]
kable(subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 14))
kable(subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 30))
kable(subset(waicSummaries, alarmGen == 'hill' & smoothWindow == 14))
kable(subset(waicSummaries, alarmGen == 'hill' & smoothWindow == 30))
kable(subset(waicSummaries, alarmGen == 'power' & smoothWindow == 14))
kable(subset(waicSummaries, alarmGen == 'power' & smoothWindow == 30))
tmp <- subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 14)
tmp <- tmp[-which(colnames(tmp) %in% c('alarmGen', 'smoothWindow'))]
kable(tmp)
tmp
kable(tmp, row.names = NULL)
?kable
kable(tmp, row.names = F)
head(waicAll)
-2*791.5809 - 22.55595
-2*-791.5809 - 22.55595
2 * 791.5809
-2*-791.5809 + 22.55595
-2 * (-791.5809 + 22.55595)
-2 * (-791.5809 - 22.55595)
