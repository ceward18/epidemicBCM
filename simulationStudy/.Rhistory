xAlarm <- seq(0, maxI, length.out = n)
constantsList <- list(tau = tau,
N = N,
I0 = I0,
bw = smoothWindow,
lengthI = lengthI,
n = n,
xAlarm = xAlarm,
maxI = maxI)
### data
dataList <- list(Istar = incData)
### inits
initsList <- list(beta = runif(1, 0, 1),
delta = runif(1, 0, 1),
nu = runif(1, 0, 10),
x0 = max(rnorm(1, maxI/2, 10), 1))
### create nimble model
myModel <- nimbleModel(modelCode,
data = dataList,
constants = constantsList,
inits = initsList)
myConfig <- configureMCMC(myModel)
myConfig$addMonitors(c('yAlarm', 'alarm'))
# block sampler for transmission parameters
paramsForBlock <- c('beta', 'delta', 'nu', 'x0')
myConfig$removeSampler(paramsForBlock)
myConfig$addSampler(target = paramsForBlock, type = "RW_block",
control = list(adaptInterval = 100,
propCov = diag(c(0.2, 0.2, 1, 50))))
myConfig
myMCMC <- buildMCMC(myConfig)
compiled <- compileNimble(myModel, myMCMC)
tmp <-  runMCMC(compiled$myMCMC,
niter = niter,
nburnin = nburn,
thin = nthin,
setSeed  = 1)
tmp
tmp[,'w']
tmp[,'x0']
tmp[,'beta']
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/simulationStudy")
i <- 51
# load libraries
library(nimble)
library(parallel)
# set up grid of models to fit
nSim <- 50
infPeriod <- c('fixed')
alarmGen <- c('thresh', 'hill', 'power')
alarmFit <- c('thresh', 'hill', 'power', 'spline', 'gp', 'betat', 'basic')
smoothWindow <- c(14, 30)
allFits <- expand.grid(simNumber = 1:nSim,
infPeriod = infPeriod,
alarmGen = alarmGen,
alarmFit = alarmFit,
smoothWindow = smoothWindow,
stringsAsFactors = FALSE)
# 1500 rows
allFits <- allFits[-which(allFits$alarmFit %in% alarmGen &
allFits$alarmFit != allFits$alarmGen),]
rownames(allFits) <- 1:nrow(allFits)
print(paste0('Now starting row: ', i))
simNumber_i <- allFits$simNumber[i]
infPeriod_i <- allFits$infPeriod[i]
alarmGen_i <- allFits$alarmGen[i]
alarmFit_i <- allFits$alarmFit[i]
smoothWindow_i <- allFits$smoothWindow[i]
# load data
incData <- readRDS(paste0('./Data/', alarmGen_i, '_',
infPeriod_i, '_', smoothWindow_i, '.rds'))
# subset row corresponding to simulation number specified
incData <- incData[simNumber_i,]
# only use the first 50 time points for model fitting
incDataFit <- incData[1:50]
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incDataFit',  'infPeriod_i', 'alarmFit_i',
'smoothWindow_i'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incDataFit, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow_i,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
plot(resThree[[1]][,'beta'], type = 'l')
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
plot(resThree[[1]][,'x0'], type = 'l')
lines(resThree[[2]][,'x0'], col = 'red')
lines(resThree[[3]][,'x0'], col = 'blue')
plot(resThree[[1]][,'delta'], type = 'l')
lines(resThree[[2]][,'delta'], col = 'red')
lines(resThree[[3]][,'delta'], col = 'blue')
postSummaries$postEpiPred$mean
postSummaries$gdiag
# load libraries
library(nimble)
library(parallel)
# set up grid of models to fit
nSim <- 50
infPeriod <- c('fixed')
alarmGen <- c('thresh', 'hill', 'power')
alarmFit <- c('thresh', 'hill', 'power', 'spline', 'gp', 'betat', 'basic')
smoothWindow <- c(14, 30)
allFits <- expand.grid(simNumber = 1:nSim,
infPeriod = infPeriod,
alarmGen = alarmGen,
alarmFit = alarmFit,
smoothWindow = smoothWindow,
stringsAsFactors = FALSE)
# 1500 rows
allFits <- allFits[-which(allFits$alarmFit %in% alarmGen &
allFits$alarmFit != allFits$alarmGen),]
rownames(allFits) <- 1:nrow(allFits)
idx <- 101
print(paste0('Now starting row: ', i))
simNumber_i <- allFits$simNumber[i]
infPeriod_i <- allFits$infPeriod[i]
alarmGen_i <- allFits$alarmGen[i]
alarmFit_i <- allFits$alarmFit[i]
smoothWindow_i <- allFits$smoothWindow[i]
i <- 101
print(paste0('Now starting row: ', i))
simNumber_i <- allFits$simNumber[i]
infPeriod_i <- allFits$infPeriod[i]
alarmGen_i <- allFits$alarmGen[i]
alarmFit_i <- allFits$alarmFit[i]
smoothWindow_i <- allFits$smoothWindow[i]
alarmFit_i
# load data
incData <- readRDS(paste0('./Data/', alarmGen_i, '_',
infPeriod_i, '_', smoothWindow_i, '.rds'))
# subset row corresponding to simulation number specified
incData <- incData[simNumber_i,]
# only use the first 50 time points for model fitting
incDataFit <- incData[1:50]
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incDataFit',  'infPeriod_i', 'alarmFit_i',
'smoothWindow_i'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incDataFit, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow_i,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
postSummaries$gdiag
postSummaries$postParams
postSummaries$waic
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/simulationStudy")
i <- 151
# load libraries
library(nimble)
library(parallel)
# set up grid of models to fit
nSim <- 50
infPeriod <- c('fixed')
alarmGen <- c('thresh', 'hill', 'power')
alarmFit <- c('thresh', 'hill', 'power', 'spline', 'gp', 'betat', 'basic')
smoothWindow <- c(14, 30)
allFits <- expand.grid(simNumber = 1:nSim,
infPeriod = infPeriod,
alarmGen = alarmGen,
alarmFit = alarmFit,
smoothWindow = smoothWindow,
stringsAsFactors = FALSE)
# 1500 rows
allFits <- allFits[-which(allFits$alarmFit %in% alarmGen &
allFits$alarmFit != allFits$alarmGen),]
rownames(allFits) <- 1:nrow(allFits)
print(paste0('Now starting row: ', i))
simNumber_i <- allFits$simNumber[i]
infPeriod_i <- allFits$infPeriod[i]
alarmGen_i <- allFits$alarmGen[i]
alarmFit_i <- allFits$alarmFit[i]
smoothWindow_i <- allFits$smoothWindow[i]
# load data
incData <- readRDS(paste0('./Data/', alarmGen_i, '_',
infPeriod_i, '_', smoothWindow_i, '.rds'))
# subset row corresponding to simulation number specified
incData <- incData[simNumber_i,]
# only use the first 50 time points for model fitting
incDataFit <- incData[1:50]
alarmFit_i
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incDataFit',  'infPeriod_i', 'alarmFit_i',
'smoothWindow_i'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incDataFit, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow_i,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
postSummaries$gdiag
postSummaries$postParams
postSummaries$waic
debugonce(summarizePost)
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
head(postPredInc)
postPredInc,1
postPredInc[,1]
postPredInc[,2]
debugonce(postPredInc)
debugonce(postPred)
postPredInc <- postPred(incData, alarmFit, infPeriod, smoothWindow,
paramsPost, alarmSamples)
dataList
myModelPred$yAlarm
length(myModelPred$yAlarm)
length(myModelPred$xAlarm)
myModelPred$simulate()
myModelPred$yAlarm
splineAlarm(myModelPred$xAlarm, myModelPred$b, myModelPred$knots)
length(splineAlarm(myModelPred$xAlarm, myModelPred$b, myModelPred$knots))
myModelPred <- nimbleModel(modelCode,
data = dataList,
constants = constantsList)
constantsList
myModelPred$n
length( splineAlarm(myModelPred$xAlarm[1:50], myModelPred$b[1:3], myModelPred$knots[1:(3 - 1)]))
splineAlarm(myModelPred$xAlarm[1:50], myModelPred$b[1:3], myModelPred$knots[1:(3 - 1)])
myModelPred$xAlarm[1:50]
myModelPred$b[1:3]
myModelPred$knots[1:(3 - 1)]
myModelPred$knots
myModelPred$yAlarm
initsList <- list(b = c(0, 0, 0), knots = c(1, maxI), beta = 0.5)
# compile model and simulator
myModelPred <- nimbleModel(modelCode,
data = dataList,
constants = constantsList,
inits = initsList)
myModelPred$knots
splineAlarm(myModelPred$xAlarm[1:50],
myModelPred$b[1:3],
myModelPred$knots[1:(3 - 1)])
myModelPred$xAlarm[1:50]
myModelPred$b[1:3]
myModelPred$knots[1:(3 - 1)]
initsList <- list(b = c(1, 1, 1),
knots = quantile(1:maxI, probs = c(0.3, 0.6)),
beta = 0.5)
# compile model and simulator
myModelPred <- nimbleModel(modelCode,
data = dataList,
constants = constantsList,
inits = initsList)
myModelPred$yAlarm[1:50] <- splineAlarm(myModelPred$xAlarm[1:50],
myModelPred$b[1:3],
myModelPred$knots[1:(3 - 1)])
splineAlarm(myModelPred$xAlarm[1:50],
myModelPred$b[1:3],
myModelPred$knots[1:(3 - 1)])
plot(splineAlarm(myModelPred$xAlarm[1:50],
myModelPred$b[1:3],
myModelPred$knots[1:(3 - 1)]))
compiledPred  <- compileNimble(myModelPred)
dataNodes <- paste0('Istar[', predTime, ']')
sim_R <- simulator(myModelPred, dataNodes)
sim_C <- compileNimble(sim_R)
nPost <- 10000
postPredInc <- matrix(NA, nrow = 50, ncol = nPost)
nPost <- 10000
postPredInc <- matrix(NA, nrow = 50, ncol = nPost)
set.seed(1)
for (j in 1:nPost) {
postIdx <- sample(1:nrow(paramsPost), 1)
betaPost <- paramsPost[postIdx,'beta']
# model specific parameters
if (alarmFit == 'thresh') {
alarmParamPost <- paramsPost[postIdx, c('delta', 'H')]
trueVals <- c(betaPost, alarmParamPost, dataObs)
} else if (alarmFit == 'hill') {
alarmParamPost <- paramsPost[postIdx, c('delta', 'nu', 'x0')]
trueVals <- c(betaPost, alarmParamPost, dataObs)
} else if (alarmFit == 'power') {
alarmParamPost <- paramsPost[postIdx, 'k']
trueVals <- c(betaPost, alarmParamPost, dataObs)
} else if (alarmFit == 'spline') {
bPost <- paramsPost[postIdx, grep('b\\[', colnames(paramsPost))]
knotsPost <- paramsPost[postIdx, grep('knots\\[', colnames(paramsPost))]
trueVals <- c(betaPost, bPost, knotsPost, dataObs)
} else if (alarmFit == 'gp') {
logitAlarmPost <- logit(alarmSamples[,postIdx])[-1]
trueVals <- c(betaPost, logitAlarmPost, dataObs)
} else if (alarmFit == 'basic') {
trueVals <- c(betaPost, dataObs)
}
postPredInc[,j] <- apply(sim_C$run(trueVals, 10), 2, median)
}
postPredInc[,1]
postSummaries$postEpiPred$mean
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
postSummaries$postEpiPred$mean
[1] 132.5445 138.2346 145.7128 154.2875 161.0555 166.2985 170.5170 175.1528 171.5370 165.6912 161.3117 154.7403 148.3113 141.4831 134.2976
[16] 129.2140 124.7705 120.9898 118.1707 116.5024 116.0366 117.1862 119.8483 123.6911 128.1687 133.0074 138.0657 142.7800 146.9043 149.8298
[31] 151.6757 152.2371 151.7383 150.2486 148.0349 145.0531 141.9007 138.5702 135.5246 132.6014 130.0871 128.1515 126.8151 126.2895 126.3094
[46] 127.1628 128.3305 130.3579 132.4526 134.8571
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
postSummaries$postEpiPred$mean
postSummaries$postEpiPred$lower
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/simulationStudy")
# load libraries
library(nimble)
library(parallel)
# set up grid of models to fit
nSim <- 50
infPeriod <- c('fixed')
alarmGen <- c('thresh', 'hill', 'power')
alarmFit <- c('thresh', 'hill', 'power', 'spline', 'gp', 'betat', 'basic')
smoothWindow <- c(14, 30)
allFits <- expand.grid(simNumber = 1:nSim,
infPeriod = infPeriod,
alarmGen = alarmGen,
alarmFit = alarmFit,
smoothWindow = smoothWindow,
stringsAsFactors = FALSE)
# 1500 rows
allFits <- allFits[-which(allFits$alarmFit %in% alarmGen &
allFits$alarmFit != allFits$alarmGen),]
rownames(allFits) <- 1:nrow(allFits)
which(allFits$alarmFit == 'betat')
i <- 451
print(paste0('Now starting row: ', i))
simNumber_i <- allFits$simNumber[i]
infPeriod_i <- allFits$infPeriod[i]
alarmGen_i <- allFits$alarmGen[i]
alarmFit_i <- allFits$alarmFit[i]
smoothWindow_i <- allFits$smoothWindow[i]
# load data
incData <- readRDS(paste0('./Data/', alarmGen_i, '_',
infPeriod_i, '_', smoothWindow_i, '.rds'))
# subset row corresponding to simulation number specified
incData <- incData[simNumber_i,]
# only use the first 50 time points for model fitting
incDataFit <- incData[1:50]
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incDataFit',  'infPeriod_i', 'alarmFit_i',
'smoothWindow_i'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incDataFit, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow_i,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
debugonce(getWAIC)
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
samples
dim(samples)
samples[,1:50] <- log(samples[1:50,])
samples[,1:50] <- log(samples[,1:50])
colnames(samples)[1:50] <- paste0('log_beta[', 1:50, ']')
samplesIstar <- cbind(samples,
incDataSamples)
waicList <- calculateWAIC(samplesIstar, compiled)
data.frame(waic = waicList$WAIC,
lppd = waicList$lppd,
pWAIC = waicList$pWAIC)
colnames(samples)
samples <- rbind(resThree[[1]], resThree[[2]], resThree[[3]])
?grep
betaCols <- grep('beta', colnames(samples))
samples <- rbind(resThree[[1]], resThree[[2]], resThree[[3]])
betaCols <- grep('beta', colnames(samples))
betaCols
length(incData)
length(betaCols)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
postSummaries$gdiag
postSummaries$postAlarm
postSummaries$postBeta
postSummaries$waic
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/simulationStudy")
idx <- 1
# load libraries
library(nimble)
library(parallel)
# set up grid of models to fit
nSim <- 50
infPeriod <- c('fixed')
alarmGen <- c('thresh', 'hill', 'power')
alarmFit <- c('thresh', 'hill', 'power', 'spline', 'gp', 'betat', 'basic')
smoothWindow <- c(14, 30)
allFits <- expand.grid(simNumber = 1:nSim,
infPeriod = infPeriod,
alarmGen = alarmGen,
alarmFit = alarmFit,
smoothWindow = smoothWindow,
stringsAsFactors = FALSE)
# 1500 rows
allFits <- allFits[-which(allFits$alarmFit %in% alarmGen &
allFits$alarmFit != allFits$alarmGen),]
rownames(allFits) <- 1:nrow(allFits)
# fit models in batches of 50 (30 batches total)
batchSize <- 50
batchIdx <- batchSize * (idx - 1) + 1:batchSize
for (i in batchIdx) {
print(paste0('Now starting row: ', i))
simNumber_i <- allFits$simNumber[i]
infPeriod_i <- allFits$infPeriod[i]
alarmGen_i <- allFits$alarmGen[i]
alarmFit_i <- allFits$alarmFit[i]
smoothWindow_i <- allFits$smoothWindow[i]
# load data
incData <- readRDS(paste0('./Data/', alarmGen_i, '_',
infPeriod_i, '_', smoothWindow_i, '.rds'))
# subset row corresponding to simulation number specified
incData <- incData[simNumber_i,]
# only use the first 50 time points for model fitting
incDataFit <- incData[1:50]
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incDataFit',  'infPeriod_i', 'alarmFit_i',
'smoothWindow_i'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incDataFit, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow_i,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i)
# save results in separate files
modelInfo <- data.frame(alarmGen = alarmGen_i,
alarmFit = alarmFit_i,
infPeriod = infPeriod_i,
smoothWindow = smoothWindow_i,
simNumber = simNumber_i)
# gelman-rubin
# posterior parameters
# posterior alarm
# posterior predictions
if (i == batchIdx[1]) {
gr <- cbind.data.frame(postSummaries$gdiag, modelInfo)
paramsPost <- cbind.data.frame(postSummaries$postParams, modelInfo)
alarmPost <- cbind.data.frame(postSummaries$postAlarm, modelInfo)
epiPredPost <- cbind.data.frame(postSummaries$postEpiPred, modelInfo)
betaPost <- cbind.data.frame(postSummaries$postBeta, modelInfo)
waicPost <- cbind.data.frame(postSummaries$waic, modelInfo)
} else {
gr <- rbind.data.frame(gr,
cbind.data.frame(postSummaries$gdiag, modelInfo))
paramsPost <- rbind.data.frame(paramsPost,
cbind.data.frame(postSummaries$postParams, modelInfo))
alarmPost <- rbind.data.frame(alarmPost,
cbind.data.frame(postSummaries$postAlarm, modelInfo))
epiPredPost <- rbind.data.frame(epiPredPost,
cbind.data.frame(postSummaries$postEpiPred, modelInfo))
betaPost <- rbind.data.frame(betaPost,
cbind.data.frame(postSummaries$postBeta, modelInfo))
waicPost <- rbind.data.frame(waicPost,
cbind.data.frame(postSummaries$waic, modelInfo))
}
} # end loop
