lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = 1)
head(tmp)
tmp[,'k']
plot(tmp[,'k'])
plot(tmp[,'rateI'])
plot(tmp[,'rateI'], type = 'l')
plot(tmp[,'Rstar[20]'], type = 'l')
plot(tmp[,'Rstar[21]'], type = 'l')
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
N = N, I0 = I0, R0 = R0, lengthI = lengthI,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow)
postSummaries
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
N = N, I0 = I0, R0 = R0, lengthI = lengthI,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow)
postSummaries
allModels
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/dataAnalysis")
i <- 41
### load libraries
library(parallel)
### read data
nyc <- read.csv('./Data/nycClean.csv')
peak <- c('1', '2', '3', '4')
alarmFit <- c( 'thresh', 'hill', 'power', 'gp', 'spline', 'betatSpline', 'basic')
infPeriod <- 'fixed'
# 56 possibilities (7 alarmFits, 4 peaks, 2 infPeriods)
allModelsFixed <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'fixed')
allModelsExp <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'exp')
allModels <- rbind.data.frame(allModelsFixed, allModelsExp)
# constants for all models
N <- nyc$Population[1]
lengthI <- 7
smoothWindow <- 30
peak_i <- allModels$peak[i]
alarmFit_i <- allModels$alarmFit[i]
infPeriod_i <- allModels$infPeriod[i]
print(paste('Running alarm:', alarmFit_i,
', peak:', peak_i,
', infPeriod:', infPeriod_i))
# get data for the specified peak
if (peak_i == 'full') {
incData <- nyc$smoothedCases
} else {
incData <- nyc$smoothedCases[which(nyc$peak == peak_i)]
}
# initialize current number of infectious and removed individuals
if (peak_i %in% c('full', '1')) {
idxStart <- 5
incData <- incData[-c(1:idxStart)]
} else {
idxStart <- min(which(nyc$peak == peak_i))
incData <- incData[-1]
}
# currently infectious
I0 <- sum(nyc$smoothedCases[max(1, (idxStart - lengthI + 1)):(idxStart)])
R0 <- nyc$cumulativeCases[idxStart] - I0
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
N = N, I0 = I0, R0 = R0, lengthI = lengthI,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow)
plot(resThree[[1]][,'beta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
postSummaries
plot(resThree[[1]][,'l'], type = 'l', ylim = c(0, 0.001))
lines(resThree[[2]][,'l'], col = 'red')
lines(resThree[[3]][,'l'], col = 'blue')
plot(resThree[[1]][,'l'], type = 'l')
lines(resThree[[2]][,'l'], col = 'red')
lines(resThree[[3]][,'l'], col = 'blue')
plot(resThree[[1]][,'l'], type = 'l', ylim = c(680, 800))
lines(resThree[[2]][,'l'], col = 'red')
lines(resThree[[3]][,'l'], col = 'blue')
plot(resThree[[1]][,'l'], type = 'l', ylim = c(680, 890))
lines(resThree[[2]][,'l'], col = 'red')
lines(resThree[[3]][,'l'], col = 'blue')
### read data
nyc <- read.csv('./Data/nycClean.csv')
nyc <- nyc[1:745,]
peak <- c('full')
alarmFit <- c( 'thresh', 'hill', 'power', 'gp', 'spline', 'betatSpline', 'basic')
# 14 possibilities (7 alarmFits, full data, 2 infPeriods)
allModelsFixed <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'fixed')
allModelsExp <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'exp')
allModels <- rbind.data.frame(allModelsFixed, allModelsExp)
allModels
i <- 1
resThree
postSummaries$gdiag
postSummaries$postParams
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/dataAnalysis")
i <- 1
### load libraries
library(parallel)
### read data
nyc <- read.csv('./Data/nycClean.csv')
nyc <- nyc[1:745,]
peak <- c('full')
alarmFit <- c( 'thresh', 'hill', 'power', 'gp', 'spline', 'betatSpline', 'basic')
# 14 possibilities (7 alarmFits, full data, 2 infPeriods)
allModelsFixed <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'fixed')
allModelsExp <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'exp')
allModels <- rbind.data.frame(allModelsFixed, allModelsExp)
# constants for all models
N <- nyc$Population[1]
lengthI <- 7
smoothWindow <- 30
peak_i <- allModels$peak[idx]
alarmFit_i <- allModels$alarmFit[idx]
infPeriod_i <- allModels$infPeriod[idx]
print(paste('Running alarm:', alarmFit_i,
', peak:', peak_i,
', infPeriod:', infPeriod_i))
# get data
incData <- nyc$smoothedCases
# initialize current number of infectious and removed individuals
idxStart <- 5
incData <- incData[-c(1:idxStart)]
# currently infectious
I0 <- sum(nyc$smoothedCases[max(1, (idxStart - lengthI + 1)):(idxStart)])
R0 <- nyc$cumulativeCases[idxStart] - I0
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
N = N, I0 = I0, R0 = R0, lengthI = lengthI,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow)
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/dataAnalysis")
### load libraries
library(parallel)
### read data
nyc <- read.csv('./Data/nycClean.csv')
nyc <- nyc[1:745,]
peak <- c('full')
alarmFit <- c( 'thresh', 'hill', 'power', 'gp', 'spline', 'betatSpline', 'basic')
# 14 possibilities (7 alarmFits, full data, 2 infPeriods)
allModelsFixed <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'fixed')
allModelsExp <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'exp')
allModels <- rbind.data.frame(allModelsFixed, allModelsExp)
# constants for all models
N <- nyc$Population[1]
lengthI <- 7
smoothWindow <- 30
peak_i <- allModels$peak[idx]
alarmFit_i <- allModels$alarmFit[idx]
infPeriod_i <- allModels$infPeriod[idx]
print(paste('Running alarm:', alarmFit_i,
', peak:', peak_i,
', infPeriod:', infPeriod_i))
# get data
incData <- nyc$smoothedCases
# initialize current number of infectious and removed individuals
idxStart <- 5
incData <- incData[-c(1:idxStart)]
# currently infectious
I0 <- sum(nyc$smoothedCases[max(1, (idxStart - lengthI + 1)):(idxStart)])
R0 <- nyc$cumulativeCases[idxStart] - I0
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
N = N, I0 = I0, R0 = R0, lengthI = lengthI,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow)
allModels
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/dataAnalysis")
idx <- 1
### load libraries
library(parallel)
### read data
nyc <- read.csv('./Data/nycClean.csv')
nyc <- nyc[1:745,]
peak <- c('full')
alarmFit <- c( 'thresh', 'hill', 'power', 'gp', 'spline', 'betatSpline', 'basic')
# 14 possibilities (7 alarmFits, full data, 2 infPeriods)
allModelsFixed <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'fixed')
allModelsExp <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'exp')
allModels <- rbind.data.frame(allModelsFixed, allModelsExp)
# constants for all models
N <- nyc$Population[1]
lengthI <- 7
smoothWindow <- 30
peak_i <- allModels$peak[idx]
alarmFit_i <- allModels$alarmFit[idx]
infPeriod_i <- allModels$infPeriod[idx]
print(paste('Running alarm:', alarmFit_i,
', peak:', peak_i,
', infPeriod:', infPeriod_i))
# get data
incData <- nyc$smoothedCases
# initialize current number of infectious and removed individuals
idxStart <- 5
incData <- incData[-c(1:idxStart)]
# currently infectious
I0 <- sum(nyc$smoothedCases[max(1, (idxStart - lengthI + 1)):(idxStart)])
R0 <- nyc$cumulativeCases[idxStart] - I0
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
N = N, I0 = I0, R0 = R0, lengthI = lengthI,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow)
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0, 0.0001))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0, 0.001))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0, 0.01))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.002, 0.004))
lines(resThree[[2]][,'H'], col = 'red')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.0025, 0.003))
lines(resThree[[2]][,'H'], col = 'red')
plot(resThree[[1]][,'beta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
postSummaries
plot(resThree[[1]][,'delta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'delta'], col = 'red')
lines(resThree[[3]][,'delta'], col = 'blue')
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/dataAnalysis")
idx <- 1
### load libraries
library(parallel)
### read data
nyc <- read.csv('./Data/nycClean.csv')
nyc <- nyc[1:745,]
peak <- c('full')
alarmFit <- c( 'thresh', 'hill', 'power', 'gp', 'spline', 'betatSpline', 'basic')
# 14 possibilities (7 alarmFits, full data, 2 infPeriods)
allModelsFixed <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'fixed')
allModelsExp <- expand.grid(peak = peak,
alarmFit = alarmFit,
infPeriod = 'exp')
allModels <- rbind.data.frame(allModelsFixed, allModelsExp)
# constants for all models
N <- nyc$Population[1]
lengthI <- 7
smoothWindow <- 30
peak_i <- allModels$peak[idx]
alarmFit_i <- allModels$alarmFit[idx]
infPeriod_i <- allModels$infPeriod[idx]
print(paste('Running alarm:', alarmFit_i,
', peak:', peak_i,
', infPeriod:', infPeriod_i))
# get data
incData <- nyc$smoothedCases
# initialize current number of infectious and removed individuals
idxStart <- 5
incData <- incData[-c(1:idxStart)]
# currently infectious
I0 <- sum(nyc$smoothedCases[max(1, (idxStart - lengthI + 1)):(idxStart)])
R0 <- nyc$cumulativeCases[idxStart] - I0
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
source('./scripts/summarizePost.R')
# debugonce(summarizePost)
postSummaries <- summarizePost(resThree = resThree, incData = incData,
N = N, I0 = I0, R0 = R0, lengthI = lengthI,
alarmFit = alarmFit_i, infPeriod = infPeriod_i,
smoothWindow = smoothWindow)
par(mfrow = c(2,2))
plot(resThree[[1]][,'beta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.0025, 0.003))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'delta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'delta'], col = 'red')
lines(resThree[[3]][,'delta'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.0001, 0.004))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
par(mfrow = c(2,2))
plot(resThree[[1]][,'beta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.0001, 0.004))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'delta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'delta'], col = 'red')
lines(resThree[[3]][,'delta'], col = 'blue')
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
par(mfrow = c(2,2))
plot(resThree[[1]][,'beta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.0001, 0.004))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'delta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'delta'], col = 'red')
lines(resThree[[3]][,'delta'], col = 'blue')
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
par(mfrow = c(2,2))
plot(resThree[[1]][,'beta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.0001, 0.004))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'delta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'delta'], col = 'red')
1/7
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
par(mfrow = c(2,2))
plot(resThree[[1]][,'beta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.0001, 0.004))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'delta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'delta'], col = 'red')
par(mfrow = c(2,2))
plot(resThree[[1]][,'beta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'beta'], col = 'red')
lines(resThree[[3]][,'beta'], col = 'blue')
plot(resThree[[1]][,'H'], type = 'l', ylim = c(0.0001, 0.004))
lines(resThree[[2]][,'H'], col = 'red')
lines(resThree[[3]][,'H'], col = 'blue')
plot(resThree[[1]][,'delta'], type = 'l', ylim = c(0, 1))
lines(resThree[[2]][,'delta'], col = 'red')
lines(resThree[[3]][,'delta'], col = 'blue')
plot(resThree[[2]][,'beta'], type = 'l')
plot(resThree[[2]][,'beta'], type = 'l', ylim = c(0.15, 0.2))
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('incData',  'infPeriod_i', 'alarmFit_i',
'N', 'I0', 'R0', 'lengthI', 'smoothWindow'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(nimble)
# source relevant scripts
source('./scripts/modelFits.R')
fitAlarmModel(incData = incData, N = N, I0 = I0, R0 = R0,
lengthI = lengthI, infPeriod = infPeriod_i,
alarmFit = alarmFit_i, smoothWindow = smoothWindow,
seed = x)
})
stopCluster(cl)
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/dataAnalysis/scripts")
