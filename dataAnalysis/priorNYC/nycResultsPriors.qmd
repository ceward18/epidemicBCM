---
title: "New York City Prior Sensitivity"
format: 
    html:
        code-fold: true
        self-contained: true
---

Fitting the behavioral change model to NYC data. 

$$\pi^{(SI)}_t = 1 - \exp\left(-\beta(1 - a_t)\frac{I_t}{N}\right)$$


Modeling each peak separately. Investigating the different alarm functions using 60 day averages to inform alarm.

Alarm functions:

* Splines
* Gaussian Processes
* Threshold
* Hill
* Power

Also comparing to a flexible spline model for $\beta_t$ and the standard approach with constant $\beta$ and no alarm function.

Results provide:

* Recovery Rate Estimates
* Estimated alarm functions
* Estimated $R_0(t)$
* Posterior predictive fit of epidemic curves
* WAIC

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, fig.width = 10, fig.height = 6,
                      warning = FALSE)

library(ggplot2)
library(grid)
library(gridExtra)
library(nimble)
library(plyr)
library(knitr)
library(scales)
library(kableExtra)

# functions to calculate the alarms
source('./scripts/modelCodes.R')

theme_set(theme_bw() + 
              theme(strip.background = element_rect(fill = 'white'),
                    strip.text = element_text(size = 18),
                    axis.title = element_text(size = 18),
                    axis.text = element_text(size = 16),
                    legend.title = element_text(size = 18),
                    legend.text = element_text(size = 16)))

infPeriodSpec <- 'exp'

```


## Data

```{r}
### read data
dat <- read.csv('./Data/nycClean.csv')
dat$date <- as.Date(dat$date)
dat$smoothedCases <- round(movingAverage(dat$dailyCases, 7))
dat$cumulativeCases <- cumsum(dat$smoothedCases)

ggplot(dat, aes(x = date, y = smoothedCases, col = factor(peak))) +
    geom_point() + 
    labs(col = "Peak", x = "Date", y = "Incidence")

```


## Recovery Rate Priors

Don't know the true value. One set of priors centered on 1/7 and one on 1/2.

```{r}
pal <- c('black', 'orange', 'blue', 'magenta')

# strong centered on truth
bb <- 1350
aa <- 1/7*bb
curve(dgamma(x, aa, bb), col = pal[1], lwd = 2, cex.lab = 1.4, cex.axis = 1.2,
      from = 0, to = 0.8)

# strong but misspecified
bb <- 4725
aa <- 1/2*bb
curve(dgamma(x, aa, bb), add = T, col = pal[2], lwd = 2)

# vague centered on truth
bb <- 100
aa <- 1/7*bb
curve(dgamma(x, aa, bb), add = T, col = pal[3], lwd = 2)

# vague and misspecified
bb <- 350
aa <- 1/2*bb
curve(dgamma(x, aa, bb), add = T, col = pal[4], lwd = 2)

legend('topright', paste0('Prior ', 1:4),
       col = pal, lwd = 2, cex = 1.4)
```


```{r}
pal <- c('black', 'orange', 'blue', 'magenta')


getVals <- function(x, mean, ll, uu, prob) {
    bb <- x
    aa <- 1 / mean * bb
    
    ((pgamma(1/ll, aa, bb) - pgamma(1/uu, aa, bb)) - prob)^2
}


# strong centered on 1/5
round(optim(2, getVals, lower = 1, method = 'L-BFGS-B',
      mean = 5, ll = 4.5, uu = 5.5, prob = 0.999)$par)

bb <- 5633
aa <- 1/5*bb
curve(dgamma(1/x, aa, bb), col = pal[1], lwd = 2, cex.lab = 1.4, cex.axis = 1.2,
      from = 0, to = 10)

pgamma(1/4.5, aa, bb) - pgamma(1/5.5, aa, bb)

# strong but misspecified
round(optim(2, getVals, lower = 1, method = 'L-BFGS-B',
      mean = 2, ll = 1.5, uu = 2.5, prob = 0.999)$par)

bb <- 419
aa <- 1/2*bb
curve(dgamma(1/x, aa, bb), add = T, col = pal[2], lwd = 2)

pgamma(1/1.5, aa, bb) - pgamma(1/2.5, aa, bb)

# vague centered on truth
round(optim(100, getVals, lower = 1, method = 'L-BFGS-B',
      mean = 5, ll = 4.5, uu = 5.5, prob = 0.65)$par)

bb <- 437
aa <- 1/5*bb
curve(dgamma(1/x, aa, bb), add = T, col = pal[3], lwd = 2)

pgamma(1/4.5, aa, bb) - pgamma(1/5.5, aa, bb)

# vague and misspecified
round(optim(2, getVals, lower = 1, method = 'L-BFGS-B',
            mean = 2, ll = 1.5, uu = 2.5, prob = 0.65)$par)

bb <- 28
aa <- 1/2*bb
curve(dgamma(1/x, aa, bb), add = T, col = pal[4], lwd = 2)

pgamma(1/1.5, aa, bb) - pgamma(1/2.5, aa, bb)

legend('topright', paste0('Prior ', 1:4),
       col = pal, lwd = 2, cex = 1.4)
```

## Gelman Rubin

Number of models remaining with Gelman Rubin > 1.1. Separated by smoothing parameter. Still some work to do to achieve convergence for some models.

```{r}
grAll <- readRDS('./resultsCombined/grAll.rds')
grAll <- grAll[grAll$infPeriod == infPeriodSpec,]

# which didn't converge
notConverge <- grAll[which(grAll$gr > 1.1),  ]
notConvergeModels <-  notConverge[
    !duplicated(notConverge
                [,-which(colnames(notConverge) %in% c('gr', 'grUpper', 'param'))]),
    c('alarmFit', 'infPeriod', 'smoothWindow', 'prior', 'peak')]
notConvergeModels$noConverge <- 1


table(notConvergeModels$alarmFit,
      notConvergeModels$peak,
      notConvergeModels$prior)

```


## Results by peak

```{r}
################################################################################

### load posterior estimates of parameters
paramsPostAll <- readRDS('./resultsCombined/paramsPostAll.rds')
paramsPostAll <- paramsPostAll[paramsPostAll$infPeriod == infPeriodSpec,]

# format for better plotting
paramsPostAll$alarmFit <- factor(paramsPostAll$alarmFit,
                                 levels = c('spline', 'gp', 'thresh', 'hill', 'power',
                                            'betatSpline', 'basic'),
                                 labels = c('Spline', 'GP', 
                                            'Threshold', 'Hill', 'Power',
                                            'Beta[t]', 'Basic'))

paramsPostAll$prior <- factor(paramsPostAll$prior, 
                              labels=c('1/7 - strong', '1/2 - strong',
                                       '1/7 - vague', '1/2 - vague'))

################################################################################
### load posterior estimates of alarm functions
alarmAll <- readRDS('./resultsCombined/alarmPostAll.rds')
alarmAll <- alarmAll[alarmAll$infPeriod == infPeriodSpec,]

### remove those that did not converge (TEMPORARY)
alarmAll <- merge(alarmAll, notConvergeModels,
                  by = c('alarmFit', 'infPeriod', 'smoothWindow', 'prior', 'peak'),
                  all.x = T)
alarmAll$noConverge[is.na(alarmAll$noConverge)] <- 0

# format for better plotting
alarmAll$alarmFit <- factor(alarmAll$alarmFit,
                            levels = c('spline', 'gp', 'thresh', 'hill', 'power'),
                            labels = c('Spline', 'Gaussian Process', 
                                       'Threshold', 'Hill', 'Power'))

alarmAll$prior <- factor(alarmAll$prior, 
                         labels=c('1/7 - strong', '1/2 - strong',
                                  '1/7 - vague', '1/2 - vague'))


################################################################################
### load posterior estimates of R0 over epidemic time
r0All <- readRDS('./resultsCombined/r0PostAll.rds')
r0All <- r0All[r0All$infPeriod == infPeriodSpec,]

### remove those that did not converge (TEMPORARY)
r0All <- merge(r0All, notConvergeModels,
               by = c('alarmFit', 'infPeriod', 'smoothWindow', 'prior', 'peak'),
               all.x = T)
r0All$noConverge[is.na(r0All$noConverge)] <- 0

# format for better plotting
r0All$alarmFit <- factor(r0All$alarmFit,
                         levels = c('spline', 'gp', 'thresh', 'hill', 'power',
                                    'betatSpline', 'basic'),
                         labels = c('Spline', 'Gaussian Process', 
                                    'Threshold', 'Hill', 'Power',
                                    'Beta[t]', 'Basic'))
r0All <- r0All[order(r0All$alarmFit, 
                     r0All$smoothWindow,
                     r0All$peak, 
                     r0All$time),]

r0All$prior <- factor(r0All$prior, 
                      labels=c('1/7 - strong', '1/2 - strong',
                               '1/7 - vague', '1/2 - vague'))

################################################################################
# posterior predictions
postPredFitAll <- readRDS('./resultsCombined/postPredFitAll.rds')
postPredFitAll <- postPredFitAll[postPredFitAll$infPeriod == infPeriodSpec,]

### remove those that did not converge (TEMPORARY)
postPredFitAll <- merge(postPredFitAll, notConvergeModels,
                        by = c('alarmFit', 'smoothWindow', 'infPeriod', 'prior', 'peak'),
                        all.x = T)
postPredFitAll$noConverge[is.na(postPredFitAll$noConverge)] <- 0

# format for better plotting
postPredFitAll$alarmFit <- factor(postPredFitAll$alarmFit,
                                  levels = c('spline', 'gp', 'thresh', 'hill',
                                             'power', 'betatSpline',  'basic'),
                                  labels = c('Spline', 'Gaussian Process',
                                             'Threshold', 'Hill', 'Power',
                                             'Beta[t]', 'Basic'))
postPredFitAll <- postPredFitAll[order(postPredFitAll$alarmFit,
                                       postPredFitAll$smoothWindow,
                                       postPredFitAll$peak,
                                       postPredFitAll$time),]

postPredFitAll$prior <- factor(postPredFitAll$prior, 
                               labels=c('1/7 - strong', '1/2 - strong',
                                        '1/7 - vague', '1/2 - vague'))

################################################################################
# format dat data to merge with R0 and postPred - those always start at "time 1"

# add 100 empty
datNew <- dat
datNew[nrow(datNew)+100,] <- NA

# add dates to extended rows
datNew$date[(nrow(datNew)-99):nrow(datNew)] <- seq(datNew$date[nrow(datNew)-100]+1,
                                                   datNew$date[nrow(datNew)-100] + 100,
                                                   1)

datNew$timeFull <- 1:nrow(datNew)-5
datNew$timeFull[1:5] <- NA
datNew$timePeak4 <- datNew$timePeak3 <- datNew$timePeak2 <- datNew$timePeak1 <- NA

# peak 1 time 1 is row 6
datNew$timePeak1[6:(max(which(datNew$peak == 1)) + 99)] <- 
    1:(max(which(datNew$peak == 1)) + 99 - 5)

datNew$timePeak2[(min(which(datNew$peak == 2)) + 1):(max(which(datNew$peak == 2)) + 99)] <-
    (min(which(datNew$peak == 2)) + 1):(max(which(datNew$peak == 2)) + 99) -
    min(which(datNew$peak == 2)) 

datNew$timePeak3[(min(which(datNew$peak == 3)) + 1):(max(which(datNew$peak == 3)) + 99)] <-
    (min(which(datNew$peak == 3)) + 1):(max(which(datNew$peak == 3)) + 99) -
    min(which(datNew$peak == 3))

datNew$timePeak4[(min(which(datNew$peak == 4)) + 1):(max(which(datNew$peak == 4)) + 99)] <-
    (min(which(datNew$peak == 4)) + 1):(max(which(datNew$peak == 4)) + 99) -
    min(which(datNew$peak == 4)) 

################################################################################
# WAIC

options(scipen=20)
waicAll <- readRDS('./resultsCombined/waicAll.rds')
waicAll <- waicAll[waicAll$infPeriod == infPeriodSpec,]

### remove those that did not converge (TEMPORARY)
waicAll <- merge(waicAll, notConvergeModels,
                 by = c('alarmFit', 'infPeriod', 'smoothWindow', 'prior', 'peak'),
                 all.x = T)

waicAll$noConverge[is.na(waicAll$noConverge)] <- 0

waicAll <- waicAll[order(waicAll$peak, waicAll$waic),]
# summaries of WAIC values by model
waicAll$waic <- round(waicAll$waic, 2)
waicAll$lppd <- round(waicAll$lppd, 2)
waicAll$pWAIC <- round(waicAll$pWAIC, 2)

waicAll$prior <- factor(waicAll$prior, 
                        labels=c('1/7 - strong', '1/2 - strong',
                                 '1/7 - vague', '1/2 - vague'))

################################################################################
### Different priors in one data frame

bb <- 1350
aa <- 1/7*bb
prior1 <- data.frame(param = 'rateI',
                     mean = 1/7,
                     lower = qgamma(0.025, aa, bb),
                     upper = qgamma(0.975, aa, bb),
                     alarmFit= 'Prior',
                     prior = 1,
                     smoothWindow = c(1, 60))

bb <- 4725
aa <- 1/2*bb
prior2 <- data.frame(param = 'rateI',
                     mean = 1/2,
                     lower = qgamma(0.025, aa, bb),
                     upper = qgamma(0.975, aa, bb),
                     alarmFit= 'Prior',
                     prior = 2,
                     smoothWindow = c(1, 60))

bb <- 100
aa <- 1/7*bb
prior3 <- data.frame(param = 'rateI',
                     mean = 1/7,
                     lower = qgamma(0.025, aa, bb),
                     upper = qgamma(0.975, aa, bb),
                     alarmFit= 'Prior',
                     prior = 3,
                     smoothWindow = c(1, 60))

bb <- 350
aa <- 1/2*bb
prior4 <- data.frame(param = 'rateI',
                     mean = 1/2,
                     lower = qgamma(0.025, aa, bb),
                     upper = qgamma(0.975, aa, bb),
                     alarmFit= 'Prior',
                     prior = 4,
                     smoothWindow = c(1, 60))

prior <- rbind.data.frame(prior1, prior2, prior3, prior4)


prior$prior <- factor(prior$prior, 
                      labels=c('1/7 - strong', '1/2 - strong',
                               '1/7 - vague', '1/2 - vague'))

```

### Peak 1

#### Data

```{r}
ggplot(subset(dat, peak== '1'), aes(x = date, y = smoothedCases)) +
    geom_line() + 
    labs(x = "Date", y = "Incidence")
```

#### Recovery Rate Estimates

Prior on recovery rate is highly concentrated on 0.2 and has an 84% probability 
of being between 0.18 and 0.22. Lower recovery rates correspond to longer 
infectious periods and larger recovery rates correspond to shorter infectious
periods.

```{r}
paramsPeak <- paramsPostAll[paramsPostAll$peak == 1, -c(6:7)]
paramsPeak <- paramsPeak[paramsPeak$param %in% c('beta', 'rateI'),]
paramsPeak <- paramsPeak[order(paramsPeak$smoothWindow, paramsPeak$alarmFit),]


paramsPeak <- rbind.data.frame(paramsPeak, prior)
paramsPeak$isPrior <- factor(ifelse(paramsPeak$alarmFit == 'Prior', 1, 0))

ggplot(paramsPeak, aes(x = alarmFit, y = mean,ymin = lower, ymax = upper,
                       col = isPrior)) +
    geom_point() +
    geom_errorbar(width = 0.4) +
    facet_grid(param~prior) +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
    scale_color_manual(values = c('black', 'red')) +
    guides(color = 'none')

ggplot(subset(paramsPeak, alarmFit != 'Prior'), 
       aes(x = prior, y = mean,ymin = lower, ymax = upper,
           col = isPrior)) +
    geom_point() +
    geom_errorbar(width = 0.4) +
    facet_grid(param~alarmFit) +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
    scale_color_manual(values = c('black', 'red')) +
    guides(color = 'none')
```


#### Estimated Alarm Functions

```{r}
ggplot(subset(alarmAll, peak== '1'), aes(x = xAlarm, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(prior~alarmFit) +
    labs(x = '14 or 30-day incidence', y = 'Alarm') +
    ylim(0, 1)
```

#### Estimated R0 Functions

```{r}
r0Peak1 <- subset(r0All, peak == '1')
r0Peak1 <- merge(r0Peak1, datNew, 
                 by.x = 'time', by.y = 'timePeak1', 
                 all.x = T)

ggplot(r0Peak1, aes(x = date, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'R0') + 
    geom_hline(yintercept = 1, linetype = 2)

ggplot(subset(r0Peak1, alarmFit != 'Beta[t]'), aes(x = date, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'R0') + 
    geom_hline(yintercept = 1, linetype = 2)
```

#### Posterior Predictive Fit

```{r}
postPredPeak1 <- subset(postPredFitAll, peak == '1')
postPredPeak1 <- merge(postPredPeak1, datNew, 
                       by.x = 'time', by.y = 'timePeak1', 
                       all.x = T)

ggplot(postPredPeak1, aes(x = date, y = mean)) +  
    geom_line(color = 'blue') +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    geom_line(aes(y = smoothedCases), color = 'black', size = 0.5) +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'Cases')

ggplot(subset(postPredPeak1, alarmFit != 'Beta[t]'),
       aes(x = date, y = mean)) +  
    geom_line(color = 'blue') +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    geom_line(aes(y = smoothedCases), color = 'black', size = 0.5) +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'Cases')
```

#### WAIC

```{r}
waicPeak <- waicAll[waicAll$peak == '1',]
kable(waicPeak[,-which(colnames(waicPeak) %in% c('peak', 'infPeriod'))], 
      row.names = F)  %>% 
    kable_styling()
```


### Peak 2

#### Data

```{r}
ggplot(subset(dat, peak== '2'), aes(x = date, y = smoothedCases)) +
    geom_line() + 
    labs(x = "Date", y = "Incidence")
```

#### Recovery Rate Estimates

Prior on recovery rate is highly concentrated on 0.2 and has an 84% probability 
of being between 0.18 and 0.22. Lower recovery rates correspond to longer 
infectious periods and larger recovery rates correspond to shorter infectious
periods.

```{r}
paramsPeak <- paramsPostAll[paramsPostAll$peak == 2, -c(6:7)]
paramsPeak <- paramsPeak[paramsPeak$param %in% c('beta', 'rateI'),]
paramsPeak <- paramsPeak[order(paramsPeak$smoothWindow, paramsPeak$alarmFit),]


paramsPeak <- rbind.data.frame(paramsPeak, prior)
paramsPeak$isPrior <- factor(ifelse(paramsPeak$alarmFit == 'Prior', 1, 0))

ggplot(paramsPeak, aes(x = alarmFit, y = mean,ymin = lower, ymax = upper,
                       col = isPrior)) +
    geom_point() +
    geom_errorbar(width = 0.4) +
    facet_grid(param~prior) +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
    scale_color_manual(values = c('black', 'red')) +
    guides(color = 'none')

ggplot(subset(paramsPeak, alarmFit != 'Prior'), 
       aes(x = prior, y = mean,ymin = lower, ymax = upper,
           col = isPrior)) +
    geom_point() +
    geom_errorbar(width = 0.4) +
    facet_grid(param~alarmFit) +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
    scale_color_manual(values = c('black', 'red')) +
    guides(color = 'none')
```

#### Estimated Alarm Functions

```{r}
ggplot(subset(alarmAll, peak== '2'), aes(x = xAlarm, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(prior~alarmFit) +
    labs(x = '14 or 30-day incidence', y = 'Alarm')
```

#### Estimated R0 Functions

```{r}
r0Peak2 <- subset(r0All, peak == '2')
r0Peak2 <- merge(r0Peak2, datNew, 
                 by.x = 'time', by.y = 'timePeak2', 
                 all.x = T)

ggplot(r0Peak2, aes(x = date, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'R0') + 
    geom_hline(yintercept = 1, linetype = 2)
```

#### Posterior Predictive Fit

```{r}
postPredPeak2 <- subset(postPredFitAll, peak == '2')
postPredPeak2 <- merge(postPredPeak2, datNew, 
                       by.x = 'time', by.y = 'timePeak2', 
                       all.x = T)

ggplot(postPredPeak2, aes(x = date, y = mean)) +  
    geom_line(color = 'blue') +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    geom_line(aes(y = smoothedCases), color = 'black', size = 0.5) +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'Cases')

```

#### WAIC

```{r}
waicPeak <- waicAll[waicAll$peak == '2',]
kable(waicPeak[,-which(colnames(waicPeak) %in% c('peak', 'infPeriod'))], 
      row.names = F)  %>% 
    kable_styling()
```


### Peak 3

#### Data

```{r}
ggplot(subset(dat, peak== '3'), aes(x = date, y = smoothedCases)) +
    geom_line() + 
    labs(x = "Date", y = "Incidence")
```

#### Recovery Rate Estimates

Prior on recovery rate is highly concentrated on 0.2 and has an 84% probability 
of being between 0.18 and 0.22. Lower recovery rates correspond to longer 
infectious periods and larger recovery rates correspond to shorter infectious
periods.

```{r}
paramsPeak <- paramsPostAll[paramsPostAll$peak == 3, -c(6:7)]
paramsPeak <- paramsPeak[paramsPeak$param %in% c('beta', 'rateI'),]
paramsPeak <- paramsPeak[order(paramsPeak$smoothWindow, paramsPeak$alarmFit),]


paramsPeak <- rbind.data.frame(paramsPeak, prior)
paramsPeak$isPrior <- factor(ifelse(paramsPeak$alarmFit == 'Prior', 1, 0))

ggplot(paramsPeak, aes(x = alarmFit, y = mean,ymin = lower, ymax = upper,
                       col = isPrior)) +
    geom_point() +
    geom_errorbar(width = 0.4) +
    facet_grid(param~prior) +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
    scale_color_manual(values = c('black', 'red')) +
    guides(color = 'none')

ggplot(subset(paramsPeak, alarmFit != 'Prior'), 
       aes(x = prior, y = mean,ymin = lower, ymax = upper,
           col = isPrior)) +
    geom_point() +
    geom_errorbar(width = 0.4) +
    facet_grid(param~alarmFit) +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
    scale_color_manual(values = c('black', 'red')) +
    guides(color = 'none')
```

#### Estimated Alarm Functions

```{r}
ggplot(subset(alarmAll, peak== '3'), aes(x = xAlarm, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(prior~alarmFit) +
    labs(x = '30-day incidence', y = 'Alarm')
```

#### Estimated R0 Functions

```{r}
r0Peak3 <- subset(r0All, peak == '3')
r0Peak3 <- merge(r0Peak3, datNew, 
                 by.x = 'time', by.y = 'timePeak3', 
                 all.x = T)

ggplot(r0Peak3, aes(x = date, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'R0') + 
    ylim(0.5, 1.6) + 
    geom_hline(yintercept = 1, linetype = 2)
```

#### Posterior Predictive Fit

```{r}
postPredPeak3 <- subset(postPredFitAll, peak == '3')
postPredPeak3 <- merge(postPredPeak3, datNew, 
                       by.x = 'time', by.y = 'timePeak3', 
                       all.x = T)

ggplot(postPredPeak3,
       aes(x = date, y = mean)) +  
    geom_line(color = 'blue') +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    geom_line(aes(y = smoothedCases), color = 'black', size = 0.5) +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'Cases')
```

#### WAIC

```{r}
waicPeak <- waicAll[waicAll$peak == '3',]
kable(waicPeak[,-which(colnames(waicPeak) %in% c('peak', 'infPeriod'))], 
      row.names = F)  %>% 
    kable_styling()
```


### Peak 4

#### Data

```{r}
ggplot(subset(dat, peak== '4'), aes(x = date, y = smoothedCases)) +
    geom_line() + 
    labs(x = "Date", y = "Incidence")
```

#### Recovery Rate Estimates

Prior on recovery rate is highly concentrated on 0.2 and has an 84% probability 
of being between 0.18 and 0.22. Lower recovery rates correspond to longer 
infectious periods and larger recovery rates correspond to shorter infectious
periods.

```{r}
paramsPeak <- paramsPostAll[paramsPostAll$peak == 4, -c(6:7)]
paramsPeak <- paramsPeak[paramsPeak$param %in% c('beta', 'rateI'),]
paramsPeak <- paramsPeak[order(paramsPeak$smoothWindow, paramsPeak$alarmFit),]


paramsPeak <- rbind.data.frame(paramsPeak, prior)
paramsPeak$isPrior <- factor(ifelse(paramsPeak$alarmFit == 'Prior', 1, 0))

ggplot(paramsPeak, aes(x = alarmFit, y = mean,ymin = lower, ymax = upper,
                       col = isPrior)) +
    geom_point() +
    geom_errorbar(width = 0.4) +
    facet_grid(param~prior) +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
    scale_color_manual(values = c('black', 'red')) +
    guides(color = 'none')

ggplot(subset(paramsPeak, alarmFit != 'Prior'), 
       aes(x = prior, y = mean,ymin = lower, ymax = upper,
           col = isPrior)) +
    geom_point() +
    geom_errorbar(width = 0.4) +
    facet_grid(param~alarmFit) +
    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1)) +
    scale_color_manual(values = c('black', 'red')) +
    guides(color = 'none')
```

#### Estimated Alarm Functions

```{r}
ggplot(subset(alarmAll, peak== '4'), aes(x = xAlarm, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(smoothWindow~alarmFit) +
    labs(x = '30-day incidence', y = 'Alarm')
```

#### Estimated R0 Functions

```{r}
r0Peak4 <- subset(r0All, peak == '4')
r0Peak4 <- merge(r0Peak4, datNew, 
                 by.x = 'time', by.y = 'timePeak4', 
                 all.x = T)

ggplot(r0Peak4, aes(x = date, y = mean)) +  
    geom_line() +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'R0') + 
    geom_hline(yintercept = 1, linetype = 2)
```

#### Posterior Predictive Fit

```{r}
postPredPeak4 <- subset(postPredFitAll, peak == '4')
postPredPeak4 <- merge(postPredPeak4, datNew, 
                       by.x = 'time', by.y = 'timePeak4', 
                       all.x = T)

ggplot(postPredPeak4,
       aes(x = date, y = mean)) +  
    geom_line(color = 'blue') +
    geom_ribbon(aes(ymin=lower, ymax=upper), alpha=0.3, fill = 'blue') +
    geom_line(aes(y = smoothedCases), color = 'black', size = 0.5) +
    facet_grid(prior~alarmFit) +
    labs(x = 'Date', y = 'Cases')
```

#### WAIC

```{r}
waicPeak <- waicAll[waicAll$peak == '4',]
kable(waicPeak[,-which(colnames(waicPeak) %in% c('peak', 'infPeriod'))], 
      row.names = F) %>% 
    kable_styling()
```

