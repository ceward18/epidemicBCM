alarmGen = c(rep('thresh', length(trueCurveThresh14)*2),
rep('hill', length(trueCurveThresh14)*2),
rep('power', length(trueCurveThresh14)*2)),
smoothWindow = rep(rep(c(14, 30), each = length(trueCurveThresh14)), 3))
head(trueCurves)
ggplot(trueCurves, aes(x = time, y = truth, group = alarmGen, linetype = smoothWindow)) +
geom_line() +
facet_wrap(~alarmGen)
ggplot(trueCurves, aes(x = time, y = truth, group = alarmGen, linetype = factor(smoothWindow))) +
geom_line() +
facet_wrap(~alarmGen)
ggplot(trueCurves, aes(x = time, y = truth, group = factor(smoothWindow), linetype = factor(smoothWindow))) +
geom_line() +
facet_wrap(~alarmGen)
ggplot(trueCurves, aes(x = time, y = truth,
group = alarmGen,
linetype = alarmGen)) +
geom_line() +
facet_wrap(~smoothWindow)
ggplot(trueCurves, aes(x = time, y = truth,
group = alarmGen,
col = alarmGen)) +
geom_line() +
facet_wrap(~smoothWindow)
head(postPredAll)
?merge
head(trueCurves)
# merge with posterior predictions
postPredAllTruth <- merge(postPredAll, trueCurves,
by = c('time', 'alarmGen', 'smoothWindow'),
all.y = T)
dim(postPredAll)
dim(trueCurves)
head(postPredAllTruth)
postPredAllTruth <- postPredAllTruth[order(postPredAllTruth$alarmGen,
postPredAllTruth$alarmFit,
postPredAllTruth$smoothWindow,
postPredAllTruth$simNumber,
postPredAllTruth$time),]
head(postPredAllTruth)
ggplot(subset(postPredAllTruth, alarmGen == 'thresh' & smoothWindow == 30)) +
geom_line(aes(x = time, y = truth, group = alarmGen, col = alarmGen)) +
geom_line(aes(x = time, y = mean, group = alarmGen, col = alarmGen)) +
facet_wrap(~alarmFit)
# merge with posterior predictions
postPredAll <- readRDS('./resultsFinal/postPredAll.rds')
postPredAll <- postPredAll[postPredAll$simNumber == simNumber,]
postPredAllTruth <- merge(postPredAll, trueCurves,
by = c('time', 'alarmGen', 'smoothWindow'),
all.y = T)
postPredAllTruth <- postPredAllTruth[order(postPredAllTruth$alarmGen,
postPredAllTruth$alarmFit,
postPredAllTruth$smoothWindow,
postPredAllTruth$time),]
head(postPredAllTruth)
ggplot(subset(postPredAllTruth, alarmGen == 'thresh' & smoothWindow == 30)) +
geom_line(aes(x = time, y = truth, group = alarmGen, col = alarmGen)) +
geom_line(aes(x = time, y = mean, group = alarmGen, col = alarmGen)) +
facet_wrap(~alarmFit)
postPredAllTruth
tail(postPredAllTruth)
tail(postPredAllTruth, 10)
ggplot() +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean, group = alarmGen, col = alarmGen)) +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth, group = alarmGen, col = alarmGen)) +
facet_wrap(~alarmFit)
ggplot() +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean)) +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
facet_wrap(~alarmFit)
ggplot() +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red') +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
facet_wrap(~alarmFit)
ggplot() +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
facet_wrap(~alarmFit)
theme_set(theme_bw() +
theme(strip.background = element_rect(fill = 'white'),
strip.text = element_text(size = 12),
axis.title = element_text(size = 12),
axis.text = element_text(size = 10)))
ggplot() +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
facet_wrap(~alarmFit)
ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(ymin=lower,ymax=upper),alpha=0.3, col = 'red') +
facet_wrap(~alarmFit)
head()
head(postPredAll)
ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, col = 'red') +
facet_wrap(~alarmFit)
ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit)
grid.arrange(p1, p2, p3, nrow = 3)
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("Daily QC: Blue",gp=gpar(fontsize=20,font=3)))
library(grid)
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("Daily QC: Blue",gp=gpar(fontsize=20,font=3)))
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("30-day smoothing", gp = gpar(fontsize = 12, font = 2)))
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("30-day smoothing", gp = gpar(fontsize = 14, font = 1)))
p1 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit)
p2 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit)
p3 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_wrap(~alarmFit)
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("14-day smoothing", gp = gpar(fontsize = 14, font = 1)))
p1 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
p2 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
p3 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("14-day smoothing", gp = gpar(fontsize = 14, font = 1)))
p1 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
p2 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'hill' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'hill' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'hill' & smoothWindow == 30),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
p3 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'power' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'power' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'power' & smoothWindow == 30),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("30-day smoothing", gp = gpar(fontsize = 14, font = 1)))
simNumber <- 2
# get true epidemic curves for each scenario
trueCurveThresh14 <- readRDS(paste0('./Data/thresh_fixed_14.rds'))[simNumber,]
trueCurveThresh30 <- readRDS(paste0('./Data/thresh_fixed_30.rds'))[simNumber,]
trueCurveHill14 <- readRDS(paste0('./Data/hill_fixed_14.rds'))[simNumber,]
trueCurveHill30 <- readRDS(paste0('./Data/hill_fixed_30.rds'))[simNumber,]
trueCurvePower14 <- readRDS(paste0('./Data/power_fixed_14.rds'))[simNumber,]
trueCurvePower30 <- readRDS(paste0('./Data/power_fixed_30.rds'))[simNumber,]
trueCurves <- data.frame(time = rep(1:length(trueCurveThresh14), 6),
truth = c(trueCurveThresh14, trueCurveThresh30,
trueCurveHill14, trueCurveHill30,
trueCurvePower14, trueCurvePower30),
alarmGen = c(rep('thresh', length(trueCurveThresh14)*2),
rep('hill', length(trueCurveThresh14)*2),
rep('power', length(trueCurveThresh14)*2)),
smoothWindow = rep(rep(c(14, 30), each = length(trueCurveThresh14)), 3))
ggplot(trueCurves, aes(x = time, y = truth, group = alarmGen, col = alarmGen)) +
geom_line() +
facet_wrap(~smoothWindow)
# merge with posterior predictions
postPredAll <- readRDS('./resultsFinal/postPredAll.rds')
postPredAll <- postPredAll[postPredAll$simNumber == simNumber,]
p1 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 14),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
p2 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'hill' & smoothWindow == 14),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
p3 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'power' & smoothWindow == 14),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("14-day smoothing", gp = gpar(fontsize = 14, font = 1)))
p1 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
p2 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'hill' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'hill' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'hill' & smoothWindow == 30),
aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
p3 <- ggplot() +
geom_line(data = subset(trueCurves, alarmGen == 'power' & smoothWindow == 30),
aes(x = time, y = truth)) +
geom_line(data = subset(postPredAll, alarmGen == 'power' & smoothWindow == 30),
aes(x = time, y = mean), col = 'red', size = 1) +
geom_ribbon(data=subset(postPredAll, alarmGen == 'power' & smoothWindow == 30),
aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
facet_wrap(~alarmFit, nrow = 1)
grid.arrange(p1, p2, p3, nrow = 3,
top=textGrob("30-day smoothing", gp = gpar(fontsize = 14, font = 1)))
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/dataAnalysis")
setwd("C:/Users/caitl/Documents/Postdoc/epidemicBCM/dataAnalysis")
urlfile<-'https://raw.github.com/nychealth/coronavirus-data/blob/master/trends/cases-by-day.csv'
dsin<-read.csv(urlfile)
dsin<-read.csv(url(urlfile))
library(RCurl)
install.packages('RCurl')
library(RCurl)
x <- getURL("https://raw.github.com/nychealth/coronavirus-data/blob/master/trends/cases-by-day.csv")
y <- read.csv(text = x)
x <- getURL("https://github.com/nychealth/coronavirus-data/blob/master/trends/cases-by-day.csv")
moves <-read.csv("https://github.com/fivethirtyeight/data/blob/master/fandango/fandango_score_comparison.csv",header=TRUE)
nyc <-read.csv("https://github.com/nychealth/coronavirus-data/blob/master/trends/cases-by-day.csv",header=TRUE)
head(nyc)
nyc <-read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/trends/cases-by-day.csv",header=TRUE)
head(nyc)
### Read in data from GitHub
nyc <-read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/trends/cases-by-day.csv")
### Read in data from GitHub
nyc <-read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/trends/cases-by-day.csv")
nyc$date_of_interest <- as.Date(nyc$date_of_interest, format = '%m/%d/%Y')
# nyc <- nyc[nyc$date_of_interest < as.Date('2021-08-01'),]
nyc$Population <- 8.419*1e6
colnames(nyc) <- c('Date', 'daily_cases', 'Population')
nyc$time <- as.numeric(nyc$Date - min(as.numeric(nyc$Date)))
head(nyc)
### Read in data from GitHub
nyc <-read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/trends/cases-by-day.csv")
head(nyc)
### Read in data from GitHub
nyc <-read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/trends/cases-by-day.csv")
nyc <- nyc[,c('date_of_interest', 'CASE_COUNT')]
nyc$date_of_interest <- as.Date(nyc$date_of_interest, format = '%m/%d/%Y')
# nyc <- nyc[nyc$date_of_interest < as.Date('2021-08-01'),]
nyc$Population <- 8.419*1e6
colnames(nyc) <- c('Date', 'daily_cases', 'Population')
nyc$time <- as.numeric(nyc$Date - min(as.numeric(nyc$Date)))
head(nyc)
plot(nyc$Date, nyc$daily_cases)
library(ggplot2)
# peak identifier
nyc$peak <- NA
# peak 1 - Feb 29 - Jun 1, 2020
startDate <- as.Date('2020-02-29')
endDate <- as.Date('2020-06-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 1
# peak 2 - Oct 15, 2020 - Jun 1, 2021
startDate <- as.Date('2020-10-15')
endDate <- as.Date('2021-06-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 2
# peak 3 - Jul 1 - Nov 1, 2021
startDate <- as.Date('2021-07-01')
endDate <- as.Date('2021-11-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 3
# peak 4 - Nov 1, 2021 - Mar 15, 2022
startDate <- as.Date('2021-11-01')
endDate <- as.Date('2021-03-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 4
ggplot(nyc, aes(x = Date, y = daily_cases, col = peak)) +
geom_line()
ggplot(nyc, aes(x = Date, y = daily_cases, col = factor(peak))) +
geom_line()
# peak identifier
nyc$peak <- NA
# peak 1 - Feb 29 - Jun 1, 2020
startDate <- as.Date('2020-02-29')
endDate <- as.Date('2020-06-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 1
# peak 2 - Oct 15, 2020 - Jun 1, 2021
startDate <- as.Date('2020-10-15')
endDate <- as.Date('2021-06-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 2
# peak 3 - Jul 1 - Nov 1, 2021
startDate <- as.Date('2021-07-01')
endDate <- as.Date('2021-11-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 3
# peak 4 - Nov 1, 2021 - Mar 15, 2022
startDate <- as.Date('2021-11-01')
endDate <- as.Date('2022-03-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 4
ggplot(nyc, aes(x = Date, y = daily_cases, col = factor(peak))) +
geom_line()
# peak identifier
nyc$peak <- 0
# peak 1 - Feb 29 - Jun 1, 2020
startDate <- as.Date('2020-02-29')
endDate <- as.Date('2020-06-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 1
# peak 2 - Oct 15, 2020 - Jun 1, 2021
startDate <- as.Date('2020-10-15')
endDate <- as.Date('2021-06-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 2
# peak 3 - Jul 1 - Nov 1, 2021
startDate <- as.Date('2021-07-01')
endDate <- as.Date('2021-11-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 3
# peak 4 - Nov 1, 2021 - Mar 15, 2022
startDate <- as.Date('2021-11-01')
endDate <- as.Date('2022-03-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 4
ggplot(nyc, aes(x = Date, y = daily_cases, col = factor(peak))) +
geom_line()
# peak identifier
nyc$peak <- 0
# peak 1 - Feb 29 - Jun 1, 2020
startDate <- as.Date('2020-02-29')
endDate <- as.Date('2020-06-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 1
# peak 2 - Oct 15, 2020 - Jun 1, 2021
startDate <- as.Date('2020-10-01')
endDate <- as.Date('2021-06-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 2
# peak 3 - Jul 1 - Nov 1, 2021
startDate <- as.Date('2021-07-01')
endDate <- as.Date('2021-11-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 3
# peak 4 - Nov 1, 2021 - Mar 15, 2022
startDate <- as.Date('2021-11-01')
endDate <- as.Date('2022-03-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 4
ggplot(nyc, aes(x = Date, y = daily_cases, col = factor(peak))) +
geom_line()
ggplot(nyc, aes(x = Date, y = daily_cases, col = factor(peak))) +
geom_point()
# peak identifier
nyc$peak <- 0
# peak 1 - Feb 29 - Jun 1, 2020
startDate <- as.Date('2020-02-29')
endDate <- as.Date('2020-06-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 1
# peak 2 - Oct 15, 2020 - Jun 1, 2021
startDate <- as.Date('2020-10-01')
endDate <- as.Date('2021-06-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 2
# peak 3 - Jul 1 - Nov 1, 2021
startDate <- as.Date('2021-07-01')
endDate <- as.Date('2021-11-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 3
# peak 4 - Nov 1, 2021 - Mar 15, 2022
startDate <- as.Date('2021-12-01')
endDate <- as.Date('2022-03-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 4
ggplot(nyc, aes(x = Date, y = daily_cases, col = factor(peak))) +
geom_point()
# peak identifier
nyc$peak <- NA
# peak 1 - Feb 29 - Jun 1, 2020
startDate <- as.Date('2020-02-29')
endDate <- as.Date('2020-06-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 1
# peak 2 - Oct 15, 2020 - Jun 1, 2021
startDate <- as.Date('2020-10-01')
endDate <- as.Date('2021-06-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 2
# peak 3 - Jul 1 - Nov 1, 2021
startDate <- as.Date('2021-07-01')
endDate <- as.Date('2021-11-01')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 3
# peak 4 - Nov 1, 2021 - Mar 15, 2022
startDate <- as.Date('2021-12-01')
endDate <- as.Date('2022-03-15')
nyc$peak[nyc$Date >= startDate & nyc$Date < endDate]<- 4
ggplot(nyc, aes(x = Date, y = daily_cases, col = factor(peak))) +
geom_point()
library(lubridate)
# calculate moving average for smoothing
movingAverage <- function(x, bw) {
n <- length(x)
bw <- floor(bw)
out <- rep(0, n)
for (i in 1:n) {
if (i < bw) {
t1 = 1
t2 = i
} else {
t1 = i - bw + 1
t2 = i
}
out[i] <- mean(x[t1:t2])
}
return(out)
}
### Read in data from GitHub
nyc <-read.csv("https://raw.githubusercontent.com/nychealth/coronavirus-data/master/trends/cases-by-day.csv")
nyc <- nyc[,c('date_of_interest', 'CASE_COUNT')]
colnames(nyc) <- c('date', 'dailyCases')
# format dates
nyc$date <- as.Date(nyc$date, format = '%m/%d/%Y')
# 7-day moving average of cases to account for reporting delays
nyc$smoothedCases <- round(movingAverage(nyc$dailyCases, 7))
# cumulative cases
nyc$cumulativeCases <- cumsum(nyc$dailyCases)
# population
nyc$Population <- 8.419*1e6
# peak identifier
nyc$peak <- NA
# peak 1 - Feb 29 - Jun 1, 2020
startDate <- as.Date('2020-02-29')
endDate <- as.Date('2020-06-15')
nyc$peak[nyc$date >= startDate & nyc$date < endDate]<- 1
# peak 2 - Oct 15, 2020 - Jun 1, 2021
startDate <- as.Date('2020-10-01')
endDate <- as.Date('2021-06-01')
nyc$peak[nyc$date >= startDate & nyc$date < endDate]<- 2
# peak 3 - Jul 1 - Nov 1, 2021
startDate <- as.Date('2021-07-01')
endDate <- as.Date('2021-11-01')
nyc$peak[nyc$date >= startDate & nyc$date < endDate]<- 3
# peak 4 - Nov 1, 2021 - Mar 15, 2022
startDate <- as.Date('2021-11-01')
endDate <- as.Date('2022-03-15')
nyc$peak[nyc$date >= startDate & nyc$date < endDate]<- 4
ggplot(nyc, aes(x = date, y = smoothedCases, col = factor(peak))) +
geom_point()
plot(nyc$date, nyc$smoothedCases, col = rainbow(4)[nyc$peak])
write.csv(nyc, './Data/nycClean.csv', quote = F, row.names = F)
head(nyc)
plot(nyc$date, nyc$smoothedCases, col = rainbow(4)[nyc$peak], type = 'l')
plot(nyc$date, nyc$smoothedCases, col = rainbow(4)[nyc$peak])
plot(nyc$date, nyc$smoothedCases, col = rainbow(4)[nyc$peak], pch = 16)
nyc <- read.csv('./Data/nycClean.csv')
head(nyc)
min(which(nyc$peak == peak))
peak <- 1
min(which(nyc$peak == peak))
peak <- 2
min(which(nyc$peak == peak))
