---
title: "Prior Sensitivity Results"
format: 
    html:
        code-fold: true
editor: visual
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(fig.width = 14, fig.height = 8)

library(openxlsx)
library(ggplot2)
library(grid)
library(gridExtra)
library(nimble)
library(plyr)
library(knitr)

# functions to calculate the alarms
source('./scripts/modelCodes.R')

theme_set(theme_bw() + 
              theme(strip.background = element_rect(fill = 'white'),
                    strip.text = element_text(size = 18),
                    axis.title = element_text(size = 18),
                    axis.text = element_text(size = 16),
                    legend.title = element_text(size = 18),
                    legend.text = element_text(size = 16)))


```

Comparing four priors for the rate paramteter describing the mean length of the
infectious period.

* Prior 1 - strong centered on truth
* Prior 2 - strong but misspecified
* Prior 3 - vague centered on truth
* Prior 4 - vague and misspecified (typo in code - did not run)

Done in the simulation setting, where the true value is 1/7 = 0.1429


```{r}
pal <- c('black', 'orange', 'blue', 'magenta')

# strong centered on truth
bb <- 1350
aa <- 1/7*bb
curve(dgamma(x, aa, bb), col = pal[1], lwd = 2, cex.lab = 1.4, cex.axis = 1.2,
      from = 0, to = 0.8)

# strong but misspecified
bb <- 1500
aa <- 1/2*bb
curve(dgamma(x, aa, bb), add = T, col = pal[2], lwd = 2)

# vague centered on truth
bb <- 100
aa <- 1/7*bb
curve(dgamma(x, aa, bb), add = T, col = pal[3], lwd = 2)

# vague and misspecified
bb <- 100
aa <- 1/2*bb
curve(dgamma(x, aa, bb), add = T, col = pal[4], lwd = 2)

abline(v = 1/7, lty = 2)

legend('topright', paste0('Prior ', 1:4),
       col = pal, lwd = 2, cex = 1.4)
```

## Gelman Rubin

By smoothing used to inform alarm function in data generation and prior used. 50 simulated epidemics using hill, power, and threshold alarms.

```{r}
grAll <- readRDS('./resultsFinal/grAll.rds')

notConverge <- grAll[which(grAll$gr > 1.1),  ]
notConvergeModels <-  notConverge[!duplicated(notConverge[,-which(colnames(notConverge) %in% 
                                                                    c('gr', 'grUpper',
                                                                      'param'))]),
                                  c('alarmGen', 'alarmFit',
                                    'prior', 'smoothWindow', 'simNumber')]

notConvergeModels$noConverge <- 1


# notConvergeModels$prior <- factor(notConvergeModels$prior, 
#                               labels=c('True/strong', 'Wrong/strong',
#                                        'True/vague'))


table(notConvergeModels$alarmGen, 
      notConvergeModels$alarmFit,
      notConvergeModels$smoothWindow,
      notConvergeModels$prior)
```

## Gelman Rubin

```{r}
### load truth
paramsTruth <- read.xlsx('simParamsSummary.xlsx')
paramsTruth <- paramsTruth[paramsTruth$infPeriod == 'exp',]

### wide to long
paramsTruth <- reshape(paramsTruth, 
                       varying = c("beta", "delta", "H", "nu", "x0", "k", "rateI"), 
                       v.names = "truth",
                       timevar = "param", 
                       times = c("beta", "delta", "H", "nu", "x0", "k", "rateI"), 
                       new.row.names = 1:1000,
                       direction = "long")

paramsTruth <- paramsTruth[-which(is.na(paramsTruth$truth)),]
paramsTruth <- paramsTruth[order(paramsTruth$alarmGen, paramsTruth$smoothWindow, paramsTruth$param),]
paramsTruth <- paramsTruth[-which(colnames(paramsTruth) %in% c('id'))]

paramsPostAll <- readRDS('./resultsFinal/paramsPostAll.rds')

# merge with truth
paramsPostAll <- merge(paramsPostAll, paramsTruth, by = c('param', 'alarmGen',
                                                          'smoothWindow'),
                       all.x = T)

paramsPostAll <- paramsPostAll[order(paramsPostAll$alarmGen, 
                                     paramsPostAll$smoothWindow,
                                     paramsPostAll$prior,
                                     paramsPostAll$simNumber, 
                                     paramsPostAll$param),]

### remove those that did not converge (TEMPORARY)
paramsPostAll <- merge(paramsPostAll, notConvergeModels,
                       by = c('alarmGen', 'alarmFit', 'prior',
                              'smoothWindow', 'simNumber'),
                       all.x = T)

paramsPostAll$noConverge[is.na(paramsPostAll$noConverge)] <- 0



paramsPostAll$param <- factor(paramsPostAll$param , 
                              levels = c('beta', 'delta', 'H', 'k', 
                                         'nu', 'x0', 'rateI'),
                              labels=c('beta', 'delta', 'H', 'k',
                                       'nu', 'x[0]', 'gamma'))
paramsPostAll <- paramsPostAll[which(!is.na(paramsPostAll$param)),]

paramsPostAll$smoothWindow <- factor(paramsPostAll$smoothWindow, 
                                     labels=c('14-day smoothing',
                                              '30-day smoothing'))


paramsPostAll$prior <- factor(paramsPostAll$prior, 
                              labels=c('True/strong', 'Wrong/strong',
                                       'True/vague'))
```

### Threshold Alarm

```{r}
ggplot(data = subset(paramsPostAll, alarmFit == 'thresh' & 
                         smoothWindow == '14-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 

ggplot(data = subset(paramsPostAll, alarmFit == 'thresh' & 
                         smoothWindow == '30-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior, scales = 'free', 
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 
```


### Hill Alarm

```{r}
ggplot(data = subset(paramsPostAll, alarmFit == 'hill' & 
                         smoothWindow == '14-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 

ggplot(data = subset(paramsPostAll, alarmFit == 'hill' & 
                         smoothWindow == '30-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior, scales = 'free', 
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 
```


### Power Alarm

```{r}
ggplot(data = subset(paramsPostAll, alarmFit == 'power' & 
                         smoothWindow == '14-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 

ggplot(data = subset(paramsPostAll, alarmFit == 'power' & 
                         smoothWindow == '30-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior, scales = 'free', 
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 
```

### Spline Alarm

```{r}
ggplot(data = subset(paramsPostAll, alarmFit == 'spline' & 
                         smoothWindow == '14-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior + alarmGen, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 

ggplot(data = subset(paramsPostAll, alarmFit == 'spline' & 
                         smoothWindow == '30-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior + alarmGen, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '')
```

### Gaussian Process Alarm

```{r}
ggplot(data = subset(paramsPostAll, alarmFit == 'gp' & 
                         smoothWindow == '14-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior + alarmGen, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 

ggplot(data = subset(paramsPostAll, alarmFit == 'gp' & 
                         smoothWindow == '30-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior + alarmGen, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '')
```

### No Behavioral Change

```{r}
ggplot(data = subset(paramsPostAll, alarmFit == 'basic' & 
                         smoothWindow == '14-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior + alarmGen, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 

ggplot(data = subset(paramsPostAll, alarmFit == 'basic' & 
                         smoothWindow == '30-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior + alarmGen, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '')
```

### Flexible $\beta_t$

```{r}
ggplot(data = subset(paramsPostAll, alarmFit == 'betatSpline' & 
                         smoothWindow == '14-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior + alarmGen, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, param = label_parsed)) +
    labs(x = 'Simulation Number', y = '') 

ggplot(data = subset(paramsPostAll, alarmFit == 'betatSpline' & 
                         smoothWindow == '30-day smoothing' & 
                         noConverge == 0), 
       aes(x = simNumber, y = mean)) +
    geom_point() + 
    geom_errorbar(aes(ymin=lower, ymax=upper), width=.9,
                  position = position_dodge(width = 0.9)) +
    geom_hline(aes(yintercept = truth), col = 'red', linetype = 2)  +
    facet_grid(param ~ prior + alarmGen, scales = 'free',
               labeller =  labeller(smoothWindow = label_value, 
                                    param = label_parsed)) +
    labs(x = 'Simulation Number', y = '')
```


## Alarm Estimation

```{r}
### get parameters for true alarms
paramsTruth <- read.xlsx('simParamsSummary.xlsx')
paramsTruth <- paramsTruth[paramsTruth$infPeriod == 'exp',]



N <- 1e6

xAlarm <- 0:400
trueAlarmThresh14 <- thresholdAlarm(xAlarm, N = N, 
                                    delta = paramsTruth$delta[
                                        (paramsTruth$alarmGen == 'thresh' & 
                                             paramsTruth$smoothWindow == 14)],
                                    H = paramsTruth$H[
                                        (paramsTruth$alarmGen == 'thresh' & 
                                             paramsTruth$smoothWindow == 14)])
trueAlarmThresh30 <- thresholdAlarm(xAlarm, N = N, 
                                    delta = paramsTruth$delta[
                                        (paramsTruth$alarmGen == 'thresh' & 
                                             paramsTruth$smoothWindow == 30)],
                                    H = paramsTruth$H[
                                        (paramsTruth$alarmGen == 'thresh' & 
                                             paramsTruth$smoothWindow == 30)])
trueAlarmHill14 <- hillAlarm(xAlarm, 
                             nu = paramsTruth$nu[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 14)],
                             x0 = paramsTruth$x0[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 14)],
                             delta = paramsTruth$delta[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 14)])
trueAlarmHill30 <- hillAlarm(xAlarm, 
                             nu = paramsTruth$nu[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 30)],
                             x0 = paramsTruth$x0[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 30)],
                             delta = paramsTruth$delta[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 30)])
trueAlarmPower14 <- powerAlarm(xAlarm, N = N, 
                               k = paramsTruth$k[
                                   (paramsTruth$alarmGen == 'power' & 
                                        paramsTruth$smoothWindow == 14)])
trueAlarmPower30 <- powerAlarm(xAlarm, N = N, 
                               k = paramsTruth$k[
                                   (paramsTruth$alarmGen == 'power' & 
                                        paramsTruth$smoothWindow == 30)])

trueAlarms <- data.frame(xAlarm = rep(xAlarm, 6),
                         trueAlarm = c(trueAlarmThresh14,
                                       trueAlarmThresh30,
                                       trueAlarmHill14,
                                       trueAlarmHill30,
                                       trueAlarmPower14,
                                       trueAlarmPower30),
                         alarmGen = c(rep('thresh', length(xAlarm)*2),
                                      rep('hill', length(xAlarm)*2),
                                      rep('power', length(xAlarm)*2)),
                         smoothWindow = rep(rep(c(14, 30), 
                                                each = length(xAlarm)), 3))

### load posterior estimates
alarmAll <- readRDS('./resultsFinal/alarmPostAll.rds')
alarmAll$infPeriod <- 'exp'

### remove those that did not converge (TEMPORARY)
alarmAll <- merge(alarmAll, notConvergeModels,
                       by = c('alarmGen', 'alarmFit',  'prior',
                              'smoothWindow', 'simNumber'),
                       all.x = T)

alarmAll$noConverge[is.na(alarmAll$noConverge)] <- 0

# format for better plotting
alarmAll$alarmFit <- factor(alarmAll$alarmFit,
                            levels = c('spline', 'gp', 'thresh', 
                                       'hill', 'power'),
                            labels = c('Spline', 'Gaussian Process', 
                                       'Threshold', 'Hill', 'Power'))


alarmAll$prior <- factor(alarmAll$prior, 
                         labels=c('True/strong', 'Wrong/strong',
                                  'True/vague'))
```


### 14-day Smoothing Window

```{r}
### smoothing window 14 days
p1 <- ggplot() +  
    geom_line(data = subset(alarmAll, smoothWindow == 14  & 
                                alarmGen == 'thresh' & noConverge == 0), 
              aes(x = xAlarm, y = mean, group = simNumber), 
              col = adjustcolor('grey40', alpha = 0.5)) +
    geom_line(data = subset(trueAlarms, smoothWindow == 14 & 
                                alarmGen == 'thresh'), 
              aes(x = xAlarm, y = trueAlarm), col = 'red') +
    facet_grid(prior~alarmFit, scales = 'free_x') 

p2 <- ggplot() +  
    geom_line(data = subset(alarmAll, smoothWindow == 14  & 
                                alarmGen == 'hill' & noConverge == 0), 
              aes(x = xAlarm, y = mean, group = simNumber), 
              col = adjustcolor('grey40', alpha = 0.5)) +
    geom_line(data = subset(trueAlarms, smoothWindow == 14 & 
                                alarmGen == 'hill'), 
              aes(x = xAlarm, y = trueAlarm), col = 'red') +
    facet_grid(prior~alarmFit, scales = 'free_x') 

p3 <- ggplot() +  
    geom_line(data = subset(alarmAll, smoothWindow == 14  & 
                                alarmGen == 'power' & noConverge == 0), 
              aes(x = xAlarm, y = mean, group = simNumber), 
              col = adjustcolor('grey40', alpha = 0.5)) +
    geom_line(data = subset(trueAlarms, smoothWindow == 14 & 
                                alarmGen == 'power'), 
              aes(x = xAlarm, y = trueAlarm), col = 'red') +
    facet_grid(prior~alarmFit, scales = 'free_x') 


grid.arrange(p1, p2, p3, nrow = 3,
             top=textGrob("14-day smoothing",
                          gp = gpar(fontsize = 18, font = 1)))
```

### 30-day Smoothing Window

```{r}
### smoothing window 14 days
p1 <- ggplot() +  
    geom_line(data = subset(alarmAll, smoothWindow == 30  & 
                                alarmGen == 'thresh'  & noConverge == 0), 
              aes(x = xAlarm, y = mean, group = simNumber), 
              col = adjustcolor('grey40', alpha = 0.5)) +
    geom_line(data = subset(trueAlarms, smoothWindow == 30 & 
                                alarmGen == 'thresh'), 
              aes(x = xAlarm, y = trueAlarm), col = 'red') +
    facet_grid(prior~alarmFit, scales = 'free_x') 

p2 <- ggplot() +  
    geom_line(data = subset(alarmAll, smoothWindow == 30  & 
                                alarmGen == 'hill' & noConverge == 0), 
              aes(x = xAlarm, y = mean, group = simNumber), 
              col = adjustcolor('grey40', alpha = 0.5)) +
    geom_line(data = subset(trueAlarms, smoothWindow == 30 & 
                                alarmGen == 'hill'), 
              aes(x = xAlarm, y = trueAlarm), col = 'red') +
    facet_grid(prior~alarmFit, scales = 'free_x') 

p3 <- ggplot() +  
    geom_line(data = subset(alarmAll, smoothWindow == 30  & 
                                alarmGen == 'power' & noConverge == 0), 
              aes(x = xAlarm, y = mean, group = simNumber), 
              col = adjustcolor('grey40', alpha = 0.5)) +
    geom_line(data = subset(trueAlarms, smoothWindow == 30 & 
                                alarmGen == 'power'), 
              aes(x = xAlarm, y = trueAlarm), col = 'red') +
    facet_grid(prior~alarmFit, scales = 'free_x') 


grid.arrange(p1, p2, p3, nrow = 3,
             top=textGrob("30-day smoothing",
                          gp = gpar(fontsize = 18, font = 1)))
```


## Posterior Prediction

```{r}
simNumber <- 1
nDays <- 100

# get true epidemic curves for each scenario
trueCurveThresh14 <- readRDS(paste0('./Data/thresh_exp_14.rds'))[simNumber,1:nDays]
trueCurveThresh30 <- readRDS(paste0('./Data/thresh_exp_30.rds'))[simNumber,1:nDays]
trueCurveHill14 <- readRDS(paste0('./Data/hill_exp_14.rds'))[simNumber,1:nDays]
trueCurveHill30 <- readRDS(paste0('./Data/hill_exp_30.rds'))[simNumber,1:nDays]
trueCurvePower14 <- readRDS(paste0('./Data/power_exp_14.rds'))[simNumber,1:nDays]
trueCurvePower30 <- readRDS(paste0('./Data/power_exp_30.rds'))[simNumber,1:nDays]

trueCurves <- data.frame(time = rep(1:length(trueCurveThresh14), 6),
                         truth = c(trueCurveThresh14, trueCurveThresh30,
                                   trueCurveHill14, trueCurveHill30,
                                   trueCurvePower14, trueCurvePower30),
                         alarmGen = c(rep('thresh', length(trueCurveThresh14)*2),
                                      rep('hill', length(trueCurveThresh14)*2),
                                      rep('power', length(trueCurveThresh14)*2)),
                         smoothWindow = rep(rep(c(14, 30), each = length(trueCurveThresh14)), 3))

# merge with posterior predictions
postPredAll <- readRDS('./resultsFinal/postPredAll.rds')
postPredAll <- postPredAll[postPredAll$simNumber == simNumber,]


### remove those that did not converge (TEMPORARY)
postPredAll <- merge(postPredAll, notConvergeModels,
                       by = c('alarmGen', 'alarmFit',  'prior',
                              'smoothWindow', 'simNumber'),
                       all.x = T)

postPredAll$noConverge[is.na(postPredAll$noConverge)] <- 0


# format for better plotting
postPredAll$alarmFit <- factor(postPredAll$alarmFit,
                               levels = c('basic', 'spline', 'gp', 'thresh',
                                          'hill', 'power'),
                               labels = c('Basic', 'Spline', 'Gaussian Process', 
                                          'Threshold', 'Hill', 'Power'))

postPredAll$prior <- factor(postPredAll$prior, 
                            labels=c('True/strong', 'Wrong/strong',
                                     'True/vague'))
```


### 14-day Smoothing Window

```{r}
p1 <- ggplot() +
    geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 14),
              aes(x = time, y = truth)) + 
    geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 14 &
                                noConverge == 0),
              aes(x = time, y = mean), col = 'red', size = 1) + 
    geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 14 &
                                noConverge == 0),
                aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
    facet_grid(prior~alarmFit, scales = 'free') 

p2 <- ggplot() +
    geom_line(data = subset(trueCurves, alarmGen == 'hill' & smoothWindow == 14),
              aes(x = time, y = truth)) + 
    geom_line(data = subset(postPredAll, alarmGen == 'hill' & smoothWindow == 14 &
                                noConverge == 0),
              aes(x = time, y = mean), col = 'red', size = 1) + 
    geom_ribbon(data=subset(postPredAll, alarmGen == 'hill' & smoothWindow == 14 &
                                noConverge == 0),
                aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
    facet_grid(prior~alarmFit, scales = 'free') 

p3 <- ggplot() +
    geom_line(data = subset(trueCurves, alarmGen == 'power' & smoothWindow == 14),
              aes(x = time, y = truth)) + 
    geom_line(data = subset(postPredAll, alarmGen == 'power' & smoothWindow == 14 &
                                noConverge == 0),
              aes(x = time, y = mean), col = 'red', size = 1) + 
    geom_ribbon(data=subset(postPredAll, alarmGen == 'power' & smoothWindow == 14 &
                                noConverge == 0),
                aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
    facet_grid(prior~alarmFit, scales = 'free') 

grid.arrange(p1, p2, p3, nrow = 3,
             top=textGrob("14-day smoothing", gp = gpar(fontsize = 18, font = 1)))
```

### 30-day Smoothing Window

```{r}
p1 <- ggplot() +
    geom_line(data = subset(trueCurves, alarmGen == 'thresh' & smoothWindow == 30),
              aes(x = time, y = truth)) + 
    geom_line(data = subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30 &
                                noConverge == 0),
              aes(x = time, y = mean), col = 'red', size = 1) + 
    geom_ribbon(data=subset(postPredAll, alarmGen == 'thresh' & smoothWindow == 30 &
                                noConverge == 0),
                aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
    facet_grid(prior~alarmFit, scales = 'free') 

p2 <- ggplot() +
    geom_line(data = subset(trueCurves, alarmGen == 'hill' & smoothWindow == 30),
              aes(x = time, y = truth)) + 
    geom_line(data = subset(postPredAll, alarmGen == 'hill' & smoothWindow == 30 &
                                noConverge == 0),
              aes(x = time, y = mean), col = 'red', size = 1) + 
    geom_ribbon(data=subset(postPredAll, alarmGen == 'hill' & smoothWindow == 30 &
                                noConverge == 0),
                aes(x = time, ymin=lower, ymax=upper), alpha=0.3, fill = 'red') +
    facet_grid(prior~alarmFit, scales = 'free') 

p3 <- ggplot() +
    geom_line(data = subset(trueCurves, alarmGen == 'power' & smoothWindow == 30),
              aes(x = time, y = truth)) + 
    geom_line(data = subset(postPredAll, alarmGen == 'power' & smoothWindow == 30 &
                                noConverge == 0),
              aes(x = time, y = mean), col = 'red', size = 1) + 
    geom_ribbon(data=subset(postPredAll, alarmGen == 'power' & smoothWindow == 30 &
                                noConverge == 0),
                aes(x = time, ymin = lower, ymax = upper), alpha = 0.3, fill = 'red') +
    facet_grid(prior~alarmFit, scales = 'free') 

grid.arrange(p1, p2, p3, nrow = 3,
             top=textGrob("30-day smoothing", gp = gpar(fontsize = 18, font = 1)))
```


## Posterior for beta[t] when modeled explicitly

For one simulation.

```{r}
# beta[t] depends on epidemic trajectory

simNumber <- 4
times <- 1:50

# get true epidemic curves for each scenario
trueCurveThresh14 <- readRDS(paste0('./Data/thresh_exp_14.rds'))[simNumber,times]
trueCurveThresh30 <- readRDS(paste0('./Data/thresh_exp_30.rds'))[simNumber,times]
trueCurveHill14 <- readRDS(paste0('./Data/hill_exp_14.rds'))[simNumber,times]
trueCurveHill30 <- readRDS(paste0('./Data/hill_exp_30.rds'))[simNumber,times]
trueCurvePower14 <- readRDS(paste0('./Data/power_exp_14.rds'))[simNumber,times]
trueCurvePower30 <- readRDS(paste0('./Data/power_exp_30.rds'))[simNumber,times]


# using epidemic trajectory and true parameters, find value of alarm[t]/beta[t]
paramsTruth <- read.xlsx('simParamsSummary.xlsx')
paramsTruth <- paramsTruth[paramsTruth$infPeriod == 'exp',]

N <- 1e6
trueAlarmThresh14 <- thresholdAlarm(movingAverage(trueCurveThresh14, 14),
                                    N = N, 
                                    delta = paramsTruth$delta[
                                        (paramsTruth$alarmGen == 'thresh' & 
                                             paramsTruth$smoothWindow == 14)],
                                    H = paramsTruth$H[
                                        (paramsTruth$alarmGen == 'thresh' & 
                                             paramsTruth$smoothWindow == 14)])
trueAlarmThresh30 <- thresholdAlarm(movingAverage(trueCurveThresh30, 30), 
                                    N = N, 
                                    delta = paramsTruth$delta[
                                        (paramsTruth$alarmGen == 'thresh' & 
                                             paramsTruth$smoothWindow == 30)],
                                    H = paramsTruth$H[
                                        (paramsTruth$alarmGen == 'thresh' & 
                                             paramsTruth$smoothWindow == 30)])
trueAlarmHill14 <- hillAlarm(movingAverage(trueCurveHill14, 14), 
                             nu = paramsTruth$nu[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 14)],
                             x0 = paramsTruth$x0[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 14)],
                             delta = paramsTruth$delta[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 14)])
trueAlarmHill30 <- hillAlarm(movingAverage(trueCurveHill30, 30), 
                             nu = paramsTruth$nu[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 30)],
                             x0 = paramsTruth$x0[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 30)],
                             delta = paramsTruth$delta[
                                 (paramsTruth$alarmGen == 'hill' & 
                                      paramsTruth$smoothWindow == 30)])
trueAlarmPower14 <- powerAlarm(movingAverage(trueCurvePower14, 14), 
                               N = N, 
                                k = paramsTruth$k[
                                    (paramsTruth$alarmGen == 'power' & 
                                         paramsTruth$smoothWindow == 14)])
trueAlarmPower30 <- powerAlarm(movingAverage(trueCurvePower30, 30),
                               N = N, 
                                k = paramsTruth$k[
                                    (paramsTruth$alarmGen == 'power' & 
                                         paramsTruth$smoothWindow == 30)])

trueAlarmsSim <- data.frame(time = rep(times, 6),
                               trueAlarm = c(trueAlarmThresh14,
                                             trueAlarmThresh30,
                                             trueAlarmHill14,
                                             trueAlarmHill30,
                                             trueAlarmPower14,
                                             trueAlarmPower30),
                               alarmGen = c(rep('thresh', length(times)*2),
                                            rep('hill', length(times)*2),
                                            rep('power', length(times)*2)),
                               smoothWindow = rep(rep(c(14, 30), each = length(times)), 3))

# from true alarms, get true beta[t]
trueBeta <- trueAlarmsSim
trueBeta$trueBeta <- paramsTruth$beta[1] * (1 - trueBeta$trueAlarm)

### load posterior estimates
betaPostAll <- readRDS('./resultsFinal/betaPostAll.rds')
betaPostAll <- betaPostAll[betaPostAll$simNumber == simNumber,]


### remove those that did not converge (TEMPORARY)
betaPostAll <- merge(betaPostAll, notConvergeModels,
                       by = c('alarmGen', 'alarmFit',  'prior',
                              'smoothWindow', 'simNumber'),
                       all.x = T)

betaPostAll$noConverge[is.na(betaPostAll$noConverge)] <- 0

notConvergeBeta <-  betaPostAll[!duplicated(betaPostAll[,
                                  c('alarmGen', 'alarmFit',
                                    'prior', 'smoothWindow', 'simNumber')]),]


# format for better plotting
betaPostAll$alarmFit <- factor(betaPostAll$alarmFit,
                               levels = c('basic', 'spline', 'gp', 'thresh',
                                          'hill', 'power'),
                               labels = c('Basic', 'Spline', 'Gaussian Process', 
                                          'Threshold', 'Hill', 'Power'))

betaPostAll$prior <- factor(betaPostAll$prior, 
                            labels=c('True/strong', 'Wrong/strong',
                                     'True/vague'))
```

### 14-day Smoothing

```{r}
ggplot() +  
    geom_line(data = subset(betaPostAll, smoothWindow == 14 & noConverge == 0), 
              aes(x = time, y = mean, group = simNumber), 
              col = 'red') +
  geom_ribbon(data=subset(betaPostAll, smoothWindow == 14 & noConverge == 0),
               aes(x = time, ymin = lower, ymax = upper), 
              alpha = 0.3, fill = 'red') +
    geom_line(data = subset(trueBeta, smoothWindow == 14), 
              aes(x = time, y = trueBeta), col = 'black') +
  facet_grid(prior~smoothWindow + alarmGen, labeller = "label_both", scales = 'free')
```

### 30-day Smoothing

```{r}
ggplot() +  
    geom_line(data = subset(betaPostAll, smoothWindow == 30 & noConverge == 0), 
              aes(x = time, y = mean, group = simNumber), 
              col = 'red') +
  geom_ribbon(data=subset(betaPostAll, smoothWindow == 30 & noConverge == 0),
               aes(x = time, ymin = lower, ymax = upper), 
              alpha = 0.3, fill = 'red') +
    geom_line(data = subset(trueBeta, smoothWindow == 30), 
              aes(x = time, y = trueBeta), col = 'black') +
  facet_grid(prior~smoothWindow + alarmGen, labeller = "label_both", scales = 'free')
```

## WAIC Comparison


```{r}
waicAll <- readRDS('./resultsFinal/waicAll.rds')

### remove those that did not converge (TEMPORARY)
waicAll <- merge(waicAll, notConvergeModels,
                 by = c('alarmGen', 'alarmFit', 
                        'prior', 'smoothWindow', 'simNumber'),
                 all.x = T)

waicAll$noConverge[is.na(waicAll$noConverge)] <- 0


# summaries of WAIC values by model
waicSummaries <- ddply(waicAll, .(alarmGen, alarmFit, smoothWindow, prior),
                       summarize,
                       nConverge = length(waic[noConverge == 0]),
                       mean_WAIC = mean(waic[noConverge == 0]),
                       mean_lppd = mean(lppd[noConverge == 0]),
                       mean_pWAIC = mean(pWAIC[noConverge == 0]))
waicSummaries <- waicSummaries[order(waicSummaries$mean_WAIC),]
```

### Threshold alarm with 14-day smoothing window

```{r}
tmp <- subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 14)
tmp <- tmp[-which(colnames(tmp) %in% c('alarmGen', 'smoothWindow'))]
kable(tmp, row.names = F)
```

### Threshold alarm with 30-day smoothing window

```{r}
tmp <- subset(waicSummaries, alarmGen == 'thresh' & smoothWindow == 30)
tmp <- tmp[-which(colnames(tmp) %in% c('alarmGen', 'smoothWindow'))]
kable(tmp, row.names = F)
```

### Hill alarm with 14-day smoothing window

```{r}
tmp <- subset(waicSummaries, alarmGen == 'hill' & smoothWindow == 14)
tmp <- tmp[-which(colnames(tmp) %in% c('alarmGen', 'smoothWindow'))]
kable(tmp, row.names = F)
```

### Hill alarm with 30-day smoothing window

```{r}
tmp <- subset(waicSummaries, alarmGen == 'hill' & smoothWindow == 30)
tmp <- tmp[-which(colnames(tmp) %in% c('alarmGen', 'smoothWindow'))]
kable(tmp, row.names = F)
```

### Power alarm with 14-day smoothing window

```{r}
tmp <- subset(waicSummaries, alarmGen == 'power' & smoothWindow == 14)
tmp <- tmp[-which(colnames(tmp) %in% c('alarmGen', 'smoothWindow'))]
kable(tmp, row.names = F)
```

### Power alarm with 30-day smoothing window

```{r}
tmp <- subset(waicSummaries, alarmGen == 'power' & smoothWindow == 30)
tmp <- tmp[-which(colnames(tmp) %in% c('alarmGen', 'smoothWindow'))]
kable(tmp, row.names = F)
```




