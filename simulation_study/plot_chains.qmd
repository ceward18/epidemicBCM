---
title: "Not Converged Models"
format: 
    html:
        code-fold: true
        self-contained: true
editor: source
---

```{r}
library(ggplot2)
library(nimble)

plotParamChains <- function(chains, param) {
    ylims <- c(min(chains[[1]][,param],
                   chains[[2]][,param],
                   chains[[3]][,param]),
               max(chains[[1]][,param],
                   chains[[2]][,param],
                   chains[[3]][,param]))
    
    plot(chains[[1]][,param], type = 'l', ylim = ylims, main = param)
    lines(chains[[2]][,param], col = 'red')
    lines(chains[[3]][,param], col = 'blue')
}

plotAlarmChains <- function(chains) {
    yAlarm1 <- chains[[1]][,grep('yAlarm', colnames(chains[[1]]))]
    yAlarm2 <- chains[[2]][,grep('yAlarm', colnames(chains[[2]]))]
    yAlarm3 <- chains[[3]][,grep('yAlarm', colnames(chains[[3]]))]
    
    yAlarmPost <- cbind.data.frame(x = rep(1:ncol(yAlarm1), 3),
                                   chain = rep(1:3, each = ncol(yAlarm1)),
                                   mean = c(colMeans(yAlarm1),
                                            colMeans(yAlarm2),
                                            colMeans(yAlarm3)),
                                   lower = c(apply(yAlarm1, 2, quantile, probs = 0.025),
                                             apply(yAlarm2, 2, quantile, probs = 0.025),
                                             apply(yAlarm3, 2, quantile, probs = 0.025)),
                                   upper = c(apply(yAlarm1, 2, quantile, probs = 0.975),
                                             apply(yAlarm2, 2, quantile, probs = 0.975),
                                             apply(yAlarm3, 2, quantile, probs = 0.975)))
    
    yAlarmPost$chain <- factor(yAlarmPost$chain)
    
    ggplot(yAlarmPost, aes(x = x, y = mean,
                           ymin = lower, ymax = upper,
                           group = chain, col = chain, fill = chain)) +
        geom_line(size = 1) + 
        geom_ribbon(alpha = 0.2) +
        theme_bw() +
        ggtitle('Alarm function') + 
        scale_color_manual(values = c('black', 'red', 'blue')) + 
        scale_fill_manual(values = c('black', 'red', 'blue'))
    
}

```

## Models that didn't converge

```{r}
grAll <- readRDS('./results/grAll.rds')

# which didn't converge
notConverge <- grAll[which(grAll$gr > 1.1),  ]
notConvergeModels <-  notConverge[
    !duplicated(notConverge[,-which(colnames(notConverge) %in% c('gr', 'grUpper', 'param'))]),
                                  c('alarmGen', 'alarmFit', 'smoothWindow', 'simNumber')]
notConvergeModels$noConverge <- 1

table(alarmGen = notConvergeModels$alarmGen,
      alarmFit = notConvergeModels$alarmFit,
      smoothWindow = notConvergeModels$smoothWindow)
```

## Spline

Priors:

```{r}
#| code-fold: show

code <- nimbleCode({
    # priors
    beta ~ dgamma(0.1, 0.1)
    for (i in 1:nb) {
        b[i] ~ dnorm(0, sd = 100)
    }
    for (i in 1:(nb - 1)) {
        knots[i] ~ dunif(min = minI, max = maxI)
    }
    rateI ~ dgamma(aa, bb)
})
```

```{r, eval =F}
#| code-fold: show

# block sampler for transmission parameters
paramsForBlock <- c('beta', 'b', 'rateI')
myConfig$removeSampler(paramsForBlock)
myConfig$addSampler(target = paramsForBlock, 
                    type = "AF_slice")

# block slice sampler for knots
paramsForBlock <- c('knots')
myConfig$removeSampler(paramsForBlock)
myConfig$addSampler(target = paramsForBlock, 
                    type = "AF_slice")
```


```{r}
plotSplineChains <- function(chains) {
    
    par(mfrow = c(2,4))
    
    param <- 'beta'
    plotParamChains(chains, param)
    
    param <- 'b[1]'
    plotParamChains(chains, param)
    
    param <- 'b[2]'
    plotParamChains(chains, param)
    
    param <- 'b[3]'
    plotParamChains(chains, param)
    
    param <- 'knots[1]'
    plotParamChains(chains, param)
    
    param <- 'knots[2]'
    plotParamChains(chains, param)
    
    param <- 'rateI'
    plotParamChains(chains, param)
    
}
```

```{r}
with(subset(notConvergeModels, alarmFit == 'spline'),
       table(alarmGen, smoothWindow))
```


### Smooth Window 14

#### Power Generation 1

```{r}
grAll[grAll$alarmFit == 'spline' & grAll$gr > 1.1,]
```


```{r}
chains <- readRDS('Output/chains_power_spline_14_13.rds')

plotSplineChains(chains)
```

```{r}
plotAlarmChains(chains)
```

```{r}
chains <- readRDS('Output/chains_power_spline_14_15.rds')

plotSplineChains(chains)
```

```{r}
plotAlarmChains(chains)
```


## Gaussian Process

Priors:

```{r}
#| code-fold: show

code <- nimbleCode({
    # priors
    beta ~ dgamma(0.1, 0.1)
    sigma ~ dgamma(100, 50)
    l ~ dinvgamma(c, d)
    rateI ~ dgamma(aa, bb)
})
```

Samplers:

```{r, eval = F}
# if gaussian process model, use slice sampling for GP parameters
paramsForSlice <- c('l', 'sigma')
myConfig$removeSampler(paramsForSlice)
myConfig$addSampler(target = paramsForSlice[1], type = "slice")
myConfig$addSampler(target = paramsForSlice[2], type = "slice")

# sample beta and rateI jointly
paramsForBlock <- c('beta', 'rateI')
myConfig$removeSampler(paramsForBlock)
myConfig$addSampler(target = paramsForBlock, 
                    type = "AF_slice")
```

```{r}
plotGPChains <- function(chains) {
    
    par(mfrow = c(2,2))
    
    param <- 'beta'
    plotParamChains(chains, param)
    
    param <- 'l'
    plotParamChains(chains, param)
    
    param <- 'sigma'
    plotParamChains(chains, param)
    
    param <- 'rateI'
    plotParamChains(chains, param)
    
}
```


### Peak 3

#### Prior 1

```{r}
grAll[grAll$alarmFit == 'gp' & grAll$gr > 1.1,]
```

```{r}
chains <- readRDS('Output/chains_thresh_gp_14_24.rds')

plotGPChains(chains)
plotAlarmChains(chains)
```


## Beta\[t\]

Priors:

```{r}
#| code-fold: show

code <- nimbleCode({
    # priors
    for (i in 1:nb) {
        b[i] ~ dnorm(0, sd = 100)
    }
    for (i in 1:(nb - 1)) {
        knots[i] ~ dunif(min = 1, max = tau)
    }
    rateI ~ dgamma(aa, bb)
    
})
```

Samplers:

```{r, eval = F}
# block sampler for transmission parameters
paramsForBlock <- c('b', 'rateI')
myConfig$removeSampler(paramsForBlock)
myConfig$addSampler(target = paramsForBlock, 
                    type = "AF_slice")

# block slice sampler for knots
paramsForBlock <- c('knots')
myConfig$removeSampler(paramsForBlock)
myConfig$addSampler(target = paramsForBlock, 
                    type = "AF_slice")
```


```{r}
plotBetatChains <- function(chains) {
    
    par(mfrow = c(2,3))
    
    param <- 'b[1]'
    plotParamChains(chains, param)
    
    param <- 'b[2]'
    plotParamChains(chains, param)
    
    param <- 'b[3]'
    plotParamChains(chains, param)
    
    param <- 'knots[1]'
    plotParamChains(chains, param)
    
    param <- 'knots[2]'
    plotParamChains(chains, param)
    
    param <- 'rateI'
    plotParamChains(chains, param)
    
}


plotBetaChains <- function(chains) {
    yAlarm1 <- chains[[1]][,grep('beta', colnames(chains[[1]]))]
    yAlarm2 <- chains[[2]][,grep('beta', colnames(chains[[2]]))]
    yAlarm3 <- chains[[3]][,grep('beta', colnames(chains[[3]]))]
    
    yAlarmPost <- cbind.data.frame(x = rep(1:ncol(yAlarm1), 3),
                                   chain = rep(1:3, each = ncol(yAlarm1)),
                                   mean = c(colMeans(yAlarm1),
                                            colMeans(yAlarm2),
                                            colMeans(yAlarm3)),
                                   lower = c(apply(yAlarm1, 2, quantile, probs = 0.025),
                                             apply(yAlarm2, 2, quantile, probs = 0.025),
                                             apply(yAlarm3, 2, quantile, probs = 0.025)),
                                   upper = c(apply(yAlarm1, 2, quantile, probs = 0.975),
                                             apply(yAlarm2, 2, quantile, probs = 0.975),
                                             apply(yAlarm3, 2, quantile, probs = 0.975)))
    
    yAlarmPost$chain <- factor(yAlarmPost$chain)
    
    ggplot(yAlarmPost, aes(x = x, y = mean,
                           ymin = lower, ymax = upper,
                           group = chain, col = chain, fill = chain)) +
        geom_line(size = 1) + 
        geom_ribbon(alpha = 0.2) +
        theme_bw() +
        ggtitle('Beta[t] function') +
        scale_color_manual(values = c('black', 'red', 'blue')) + 
        scale_fill_manual(values = c('black', 'red', 'blue'))
    
}
```


### Power Generated


```{r}
grAll[grAll$alarmGen == 'power' & grAll$alarmFit == 'betatSpline' & grAll$gr > 1.1,]
```


```{r}
chains <- readRDS('Output/chains_power_betatSpline_30_7.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```

```{r}
chains <- readRDS('Output/chains_power_betatSpline_30_10.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```


```{r}
chains <- readRDS('Output/chains_power_betatSpline_30_19.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```


```{r}
chains <- readRDS('Output/chains_power_betatSpline_30_30.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```


```{r}
chains <- readRDS('Output/chains_power_betatSpline_30_31.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```


```{r}
chains <- readRDS('Output/chains_power_betatSpline_30_35.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```


```{r}
chains <- readRDS('Output/chains_power_betatSpline_30_38.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```


### Threshold Generated

```{r}
grAll[grAll$alarmGen == 'thresh' & 
          grAll$alarmFit == 'betatSpline' & 
          grAll$gr > 1.1,]
```

```{r}
chains <- readRDS('Output/chains_thresh_betatSpline_30_11.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```


```{r}
chains <- readRDS('Output/chains_thresh_betatSpline_30_22.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```


```{r}
chains <- readRDS('Output/chains_thresh_betatSpline_30_30.rds')

plotBetatChains(chains)
plotBetaChains(chains)
```
